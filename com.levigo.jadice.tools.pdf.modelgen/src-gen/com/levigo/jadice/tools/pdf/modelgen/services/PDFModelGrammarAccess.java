/*
* generated by Xtext
*/
package com.levigo.jadice.tools.pdf.modelgen.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class PDFModelGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class PDFModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PDFModel");
		private final Assignment cPackagesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPackagesPackageDeclarationParserRuleCall_0 = (RuleCall)cPackagesAssignment.eContents().get(0);
		
		//PDFModel:
		//	packages+=PackageDeclaration+;
		public ParserRule getRule() { return rule; }

		//packages+=PackageDeclaration+
		public Assignment getPackagesAssignment() { return cPackagesAssignment; }

		//PackageDeclaration
		public RuleCall getPackagesPackageDeclarationParserRuleCall_0() { return cPackagesPackageDeclarationParserRuleCall_0; }
	}

	public class AbstractDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDictionaryDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNameEnumDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cArrayMappedDeclarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBitFlagsDeclarationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//AbstractDeclaration:
		//	DictionaryDeclaration | NameEnumDeclaration | ArrayMappedDeclaration | BitFlagsDeclaration;
		public ParserRule getRule() { return rule; }

		//DictionaryDeclaration | NameEnumDeclaration | ArrayMappedDeclaration | BitFlagsDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//DictionaryDeclaration
		public RuleCall getDictionaryDeclarationParserRuleCall_0() { return cDictionaryDeclarationParserRuleCall_0; }

		//NameEnumDeclaration
		public RuleCall getNameEnumDeclarationParserRuleCall_1() { return cNameEnumDeclarationParserRuleCall_1; }

		//ArrayMappedDeclaration
		public RuleCall getArrayMappedDeclarationParserRuleCall_2() { return cArrayMappedDeclarationParserRuleCall_2; }

		//BitFlagsDeclaration
		public RuleCall getBitFlagsDeclarationParserRuleCall_3() { return cBitFlagsDeclarationParserRuleCall_3; }
	}

	public class SpecificationReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SpecificationReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSpecRefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cISO3200012008Keyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSectionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSectionSectionReferenceParserRuleCall_3_0 = (RuleCall)cSectionAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cTableKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cTableAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cTableINTTerminalRuleCall_4_2_0 = (RuleCall)cTableAssignment_4_2.eContents().get(0);
		
		//SpecificationReference:
		//	"@spec-ref" "ISO32000-1:2008" "," section=SectionReference ("," "table" table=INT)?;
		public ParserRule getRule() { return rule; }

		//"@spec-ref" "ISO32000-1:2008" "," section=SectionReference ("," "table" table=INT)?
		public Group getGroup() { return cGroup; }

		//"@spec-ref"
		public Keyword getSpecRefKeyword_0() { return cSpecRefKeyword_0; }

		//"ISO32000-1:2008"
		public Keyword getISO3200012008Keyword_1() { return cISO3200012008Keyword_1; }

		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//section=SectionReference
		public Assignment getSectionAssignment_3() { return cSectionAssignment_3; }

		//SectionReference
		public RuleCall getSectionSectionReferenceParserRuleCall_3_0() { return cSectionSectionReferenceParserRuleCall_3_0; }

		//("," "table" table=INT)?
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//"table"
		public Keyword getTableKeyword_4_1() { return cTableKeyword_4_1; }

		//table=INT
		public Assignment getTableAssignment_4_2() { return cTableAssignment_4_2; }

		//INT
		public RuleCall getTableINTTerminalRuleCall_4_2_0() { return cTableINTTerminalRuleCall_4_2_0; }
	}

	public class SectionReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SectionReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSectionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSectionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSectionSTRINGTerminalRuleCall_1_0 = (RuleCall)cSectionAssignment_1.eContents().get(0);
		
		//SectionReference:
		//	"section" section=STRING;
		public ParserRule getRule() { return rule; }

		//"section" section=STRING
		public Group getGroup() { return cGroup; }

		//"section"
		public Keyword getSectionKeyword_0() { return cSectionKeyword_0; }

		//section=STRING
		public Assignment getSectionAssignment_1() { return cSectionAssignment_1; }

		//STRING
		public RuleCall getSectionSTRINGTerminalRuleCall_1_0() { return cSectionSTRINGTerminalRuleCall_1_0; }
	}

	public class ArrayMappedDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArrayMappedDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArrayMappedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSinceAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSinceSinceVersionEnumRuleCall_2_1_0 = (RuleCall)cSinceAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEntriesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEntriesArrayMappedEntryParserRuleCall_4_0 = (RuleCall)cEntriesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ArrayMappedDeclaration:
		//	"array-mapped" name=ValidID ("(" since=SinceVersion ")")? "{" entries+=ArrayMappedEntry+ "}";
		public ParserRule getRule() { return rule; }

		//"array-mapped" name=ValidID ("(" since=SinceVersion ")")? "{" entries+=ArrayMappedEntry+ "}"
		public Group getGroup() { return cGroup; }

		//"array-mapped"
		public Keyword getArrayMappedKeyword_0() { return cArrayMappedKeyword_0; }

		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }

		//("(" since=SinceVersion ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//since=SinceVersion
		public Assignment getSinceAssignment_2_1() { return cSinceAssignment_2_1; }

		//SinceVersion
		public RuleCall getSinceSinceVersionEnumRuleCall_2_1_0() { return cSinceSinceVersionEnumRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//entries+=ArrayMappedEntry+
		public Assignment getEntriesAssignment_4() { return cEntriesAssignment_4; }

		//ArrayMappedEntry
		public RuleCall getEntriesArrayMappedEntryParserRuleCall_4_0() { return cEntriesArrayMappedEntryParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class AbstractEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractEntry");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cArrayMappedEntryParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDictionaryEntryParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractEntry:
		//	ArrayMappedEntry | DictionaryEntry;
		public ParserRule getRule() { return rule; }

		//ArrayMappedEntry | DictionaryEntry
		public Alternatives getAlternatives() { return cAlternatives; }

		//ArrayMappedEntry
		public RuleCall getArrayMappedEntryParserRuleCall_0() { return cArrayMappedEntryParserRuleCall_0; }

		//DictionaryEntry
		public RuleCall getDictionaryEntryParserRuleCall_1() { return cDictionaryEntryParserRuleCall_1; }
	}

	public class ArrayMappedEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArrayMappedEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIndexAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIndexINTTerminalRuleCall_0_0 = (RuleCall)cIndexAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cCachedAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cCachedCachedKeyword_3_0 = (Keyword)cCachedAssignment_3.eContents().get(0);
		private final Assignment cRequiredAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cRequiredRequiredKeyword_4_0 = (Keyword)cRequiredAssignment_4.eContents().get(0);
		private final Assignment cNullableAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Keyword cNullableNullableKeyword_5_0 = (Keyword)cNullableAssignment_5.eContents().get(0);
		private final Assignment cIndirectReferenceAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cIndirectReferenceIndirectReferenceEnumRuleCall_6_0 = (RuleCall)cIndirectReferenceAssignment_6.eContents().get(0);
		private final Assignment cValueAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cValueAbstractEntryValueParserRuleCall_7_0 = (RuleCall)cValueAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cLeftParenthesisKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cSinceAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cSinceSinceVersionEnumRuleCall_8_1_0 = (RuleCall)cSinceAssignment_8_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		private final Assignment cRequiresCustomValidationAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final Keyword cRequiresCustomValidationCustomValidationKeyword_9_0 = (Keyword)cRequiresCustomValidationAssignment_9.eContents().get(0);
		private final Assignment cRequiresCustomDefaultAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final Keyword cRequiresCustomDefaultCustomDefaultKeyword_10_0 = (Keyword)cRequiresCustomDefaultAssignment_10.eContents().get(0);
		private final Keyword cSemicolonKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//ArrayMappedEntry:
		//	index=INT "->" name=ValidID cached?="cached"? required?="required"? nullable?="nullable"?
		//	indirectReference=IndirectReference? value=AbstractEntryValue ("(" since=SinceVersion ")")?
		//	requiresCustomValidation?="custom-validation"? requiresCustomDefault?="custom-default"? ";";
		public ParserRule getRule() { return rule; }

		//index=INT "->" name=ValidID cached?="cached"? required?="required"? nullable?="nullable"?
		//indirectReference=IndirectReference? value=AbstractEntryValue ("(" since=SinceVersion ")")?
		//requiresCustomValidation?="custom-validation"? requiresCustomDefault?="custom-default"? ";"
		public Group getGroup() { return cGroup; }

		//index=INT
		public Assignment getIndexAssignment_0() { return cIndexAssignment_0; }

		//INT
		public RuleCall getIndexINTTerminalRuleCall_0_0() { return cIndexINTTerminalRuleCall_0_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }

		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }

		//cached?="cached"?
		public Assignment getCachedAssignment_3() { return cCachedAssignment_3; }

		//"cached"
		public Keyword getCachedCachedKeyword_3_0() { return cCachedCachedKeyword_3_0; }

		//required?="required"?
		public Assignment getRequiredAssignment_4() { return cRequiredAssignment_4; }

		//"required"
		public Keyword getRequiredRequiredKeyword_4_0() { return cRequiredRequiredKeyword_4_0; }

		//nullable?="nullable"?
		public Assignment getNullableAssignment_5() { return cNullableAssignment_5; }

		//"nullable"
		public Keyword getNullableNullableKeyword_5_0() { return cNullableNullableKeyword_5_0; }

		//indirectReference=IndirectReference?
		public Assignment getIndirectReferenceAssignment_6() { return cIndirectReferenceAssignment_6; }

		//IndirectReference
		public RuleCall getIndirectReferenceIndirectReferenceEnumRuleCall_6_0() { return cIndirectReferenceIndirectReferenceEnumRuleCall_6_0; }

		//value=AbstractEntryValue
		public Assignment getValueAssignment_7() { return cValueAssignment_7; }

		//AbstractEntryValue
		public RuleCall getValueAbstractEntryValueParserRuleCall_7_0() { return cValueAbstractEntryValueParserRuleCall_7_0; }

		//("(" since=SinceVersion ")")?
		public Group getGroup_8() { return cGroup_8; }

		//"("
		public Keyword getLeftParenthesisKeyword_8_0() { return cLeftParenthesisKeyword_8_0; }

		//since=SinceVersion
		public Assignment getSinceAssignment_8_1() { return cSinceAssignment_8_1; }

		//SinceVersion
		public RuleCall getSinceSinceVersionEnumRuleCall_8_1_0() { return cSinceSinceVersionEnumRuleCall_8_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_8_2() { return cRightParenthesisKeyword_8_2; }

		//requiresCustomValidation?="custom-validation"?
		public Assignment getRequiresCustomValidationAssignment_9() { return cRequiresCustomValidationAssignment_9; }

		//"custom-validation"
		public Keyword getRequiresCustomValidationCustomValidationKeyword_9_0() { return cRequiresCustomValidationCustomValidationKeyword_9_0; }

		//requiresCustomDefault?="custom-default"?
		public Assignment getRequiresCustomDefaultAssignment_10() { return cRequiresCustomDefaultAssignment_10; }

		//"custom-default"
		public Keyword getRequiresCustomDefaultCustomDefaultKeyword_10_0() { return cRequiresCustomDefaultCustomDefaultKeyword_10_0; }

		//";"
		public Keyword getSemicolonKeyword_11() { return cSemicolonKeyword_11; }
	}

	public class DictionaryDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DictionaryDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cDictObjKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Assignment cStreamAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cStreamStreamObjKeyword_0_1_0 = (Keyword)cStreamAssignment_0_1.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperTypesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSuperTypesDictionaryDeclarationCrossReference_2_1_0 = (CrossReference)cSuperTypesAssignment_2_1.eContents().get(0);
		private final RuleCall cSuperTypesDictionaryDeclarationQualifiedNameParserRuleCall_2_1_0_1 = (RuleCall)cSuperTypesDictionaryDeclarationCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cSuperTypesAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final CrossReference cSuperTypesDictionaryDeclarationCrossReference_2_2_1_0 = (CrossReference)cSuperTypesAssignment_2_2_1.eContents().get(0);
		private final RuleCall cSuperTypesDictionaryDeclarationQualifiedNameParserRuleCall_2_2_1_0_1 = (RuleCall)cSuperTypesDictionaryDeclarationCrossReference_2_2_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSinceAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSinceSinceVersionEnumRuleCall_3_1_0 = (RuleCall)cSinceAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cConfigKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cSubtypeConfigAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cSubtypeConfigSubtypeConfigParserRuleCall_5_2_0 = (RuleCall)cSubtypeConfigAssignment_5_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Assignment cEntriesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cEntriesDictionaryEntryParserRuleCall_6_0 = (RuleCall)cEntriesAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//DictionaryDeclaration:
		//	("dict-obj" | stream?="stream-obj") name=ValidID ("extends" superTypes+=[DictionaryDeclaration|QualifiedName] (","
		//	superTypes+=[DictionaryDeclaration|QualifiedName])*)? ("(" since=SinceVersion ")")? "{" ("config" "{"
		//	subtypeConfig=SubtypeConfig? "}")? entries+=DictionaryEntry* "}";
		public ParserRule getRule() { return rule; }

		//("dict-obj" | stream?="stream-obj") name=ValidID ("extends" superTypes+=[DictionaryDeclaration|QualifiedName] (","
		//superTypes+=[DictionaryDeclaration|QualifiedName])*)? ("(" since=SinceVersion ")")? "{" ("config" "{"
		//subtypeConfig=SubtypeConfig? "}")? entries+=DictionaryEntry* "}"
		public Group getGroup() { return cGroup; }

		//"dict-obj" | stream?="stream-obj"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"dict-obj"
		public Keyword getDictObjKeyword_0_0() { return cDictObjKeyword_0_0; }

		//stream?="stream-obj"
		public Assignment getStreamAssignment_0_1() { return cStreamAssignment_0_1; }

		//"stream-obj"
		public Keyword getStreamStreamObjKeyword_0_1_0() { return cStreamStreamObjKeyword_0_1_0; }

		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }

		//("extends" superTypes+=[DictionaryDeclaration|QualifiedName] ("," superTypes+=[DictionaryDeclaration|QualifiedName])*)?
		public Group getGroup_2() { return cGroup_2; }

		//"extends"
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }

		//superTypes+=[DictionaryDeclaration|QualifiedName]
		public Assignment getSuperTypesAssignment_2_1() { return cSuperTypesAssignment_2_1; }

		//[DictionaryDeclaration|QualifiedName]
		public CrossReference getSuperTypesDictionaryDeclarationCrossReference_2_1_0() { return cSuperTypesDictionaryDeclarationCrossReference_2_1_0; }

		//QualifiedName
		public RuleCall getSuperTypesDictionaryDeclarationQualifiedNameParserRuleCall_2_1_0_1() { return cSuperTypesDictionaryDeclarationQualifiedNameParserRuleCall_2_1_0_1; }

		//("," superTypes+=[DictionaryDeclaration|QualifiedName])*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//superTypes+=[DictionaryDeclaration|QualifiedName]
		public Assignment getSuperTypesAssignment_2_2_1() { return cSuperTypesAssignment_2_2_1; }

		//[DictionaryDeclaration|QualifiedName]
		public CrossReference getSuperTypesDictionaryDeclarationCrossReference_2_2_1_0() { return cSuperTypesDictionaryDeclarationCrossReference_2_2_1_0; }

		//QualifiedName
		public RuleCall getSuperTypesDictionaryDeclarationQualifiedNameParserRuleCall_2_2_1_0_1() { return cSuperTypesDictionaryDeclarationQualifiedNameParserRuleCall_2_2_1_0_1; }

		//("(" since=SinceVersion ")")?
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//since=SinceVersion
		public Assignment getSinceAssignment_3_1() { return cSinceAssignment_3_1; }

		//SinceVersion
		public RuleCall getSinceSinceVersionEnumRuleCall_3_1_0() { return cSinceSinceVersionEnumRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//("config" "{" subtypeConfig=SubtypeConfig? "}")?
		public Group getGroup_5() { return cGroup_5; }

		//"config"
		public Keyword getConfigKeyword_5_0() { return cConfigKeyword_5_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }

		//subtypeConfig=SubtypeConfig?
		public Assignment getSubtypeConfigAssignment_5_2() { return cSubtypeConfigAssignment_5_2; }

		//SubtypeConfig
		public RuleCall getSubtypeConfigSubtypeConfigParserRuleCall_5_2_0() { return cSubtypeConfigSubtypeConfigParserRuleCall_5_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5_3() { return cRightCurlyBracketKeyword_5_3; }

		//entries+=DictionaryEntry*
		public Assignment getEntriesAssignment_6() { return cEntriesAssignment_6; }

		//DictionaryEntry
		public RuleCall getEntriesDictionaryEntryParserRuleCall_6_0() { return cEntriesDictionaryEntryParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class SubtypeConfigElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubtypeConfig");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSubtypesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCandidatesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cCandidatesDictionaryDeclarationCrossReference_1_0 = (CrossReference)cCandidatesAssignment_1.eContents().get(0);
		private final RuleCall cCandidatesDictionaryDeclarationQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cCandidatesDictionaryDeclarationCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cCandidatesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cCandidatesDictionaryDeclarationCrossReference_2_1_0 = (CrossReference)cCandidatesAssignment_2_1.eContents().get(0);
		private final RuleCall cCandidatesDictionaryDeclarationQualifiedNameParserRuleCall_2_1_0_1 = (RuleCall)cCandidatesDictionaryDeclarationCrossReference_2_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SubtypeConfig:
		//	"subtypes" candidates+=[DictionaryDeclaration|QualifiedName] ("," candidates+=[DictionaryDeclaration|QualifiedName])*
		//	";";
		public ParserRule getRule() { return rule; }

		//"subtypes" candidates+=[DictionaryDeclaration|QualifiedName] ("," candidates+=[DictionaryDeclaration|QualifiedName])*
		//";"
		public Group getGroup() { return cGroup; }

		//"subtypes"
		public Keyword getSubtypesKeyword_0() { return cSubtypesKeyword_0; }

		//candidates+=[DictionaryDeclaration|QualifiedName]
		public Assignment getCandidatesAssignment_1() { return cCandidatesAssignment_1; }

		//[DictionaryDeclaration|QualifiedName]
		public CrossReference getCandidatesDictionaryDeclarationCrossReference_1_0() { return cCandidatesDictionaryDeclarationCrossReference_1_0; }

		//QualifiedName
		public RuleCall getCandidatesDictionaryDeclarationQualifiedNameParserRuleCall_1_0_1() { return cCandidatesDictionaryDeclarationQualifiedNameParserRuleCall_1_0_1; }

		//("," candidates+=[DictionaryDeclaration|QualifiedName])*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//candidates+=[DictionaryDeclaration|QualifiedName]
		public Assignment getCandidatesAssignment_2_1() { return cCandidatesAssignment_2_1; }

		//[DictionaryDeclaration|QualifiedName]
		public CrossReference getCandidatesDictionaryDeclarationCrossReference_2_1_0() { return cCandidatesDictionaryDeclarationCrossReference_2_1_0; }

		//QualifiedName
		public RuleCall getCandidatesDictionaryDeclarationQualifiedNameParserRuleCall_2_1_0_1() { return cCandidatesDictionaryDeclarationQualifiedNameParserRuleCall_2_1_0_1; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class DictionaryEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DictionaryEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyNAME_OBJECTTerminalRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAliasAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAliasIDTerminalRuleCall_1_1_0 = (RuleCall)cAliasAssignment_1_1.eContents().get(0);
		private final Assignment cCachedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cCachedCachedKeyword_2_0 = (Keyword)cCachedAssignment_2.eContents().get(0);
		private final Assignment cRequiredAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cRequiredRequiredKeyword_3_0 = (Keyword)cRequiredAssignment_3.eContents().get(0);
		private final Assignment cInheritableAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cInheritableInheritableKeyword_4_0 = (Keyword)cInheritableAssignment_4.eContents().get(0);
		private final Assignment cIndirectReferenceAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cIndirectReferenceIndirectReferenceEnumRuleCall_5_0 = (RuleCall)cIndirectReferenceAssignment_5.eContents().get(0);
		private final Assignment cValueAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cValueAbstractEntryValueParserRuleCall_6_0 = (RuleCall)cValueAssignment_6.eContents().get(0);
		private final Assignment cRequiresCustomValidationAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final Keyword cRequiresCustomValidationCustomValidationKeyword_7_0 = (Keyword)cRequiresCustomValidationAssignment_7.eContents().get(0);
		private final Assignment cRequiresCustomDefaultAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final Keyword cRequiresCustomDefaultCustomDefaultKeyword_8_0 = (Keyword)cRequiresCustomDefaultAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cLeftParenthesisKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cSinceAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cSinceSinceVersionEnumRuleCall_9_1_0 = (RuleCall)cSinceAssignment_9_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9_2 = (Keyword)cGroup_9.eContents().get(2);
		private final Keyword cSemicolonKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		////AbstractDictionarySubtypeDetector:
		//
		////	NamedEntrySubtypeDetector | EntryExistsSubtypeDetector | IntegerEntryValueSubtypeDetector;
		// //
		//
		////NamedEntrySubtypeDetector:
		// //	'name-detector' '{'
		// //	'key' subtypeName=NAME_OBJECT ';'
		//
		////	'subtypes' subtypes+=[DictionaryDeclaration|QualifiedName] (','
		//
		////	subtypes+=[DictionaryDeclaration|QualifiedName])* ';'
		// //	'}';
		// //
		// //EntryExistsSubtypeDetector:
		//
		////	'entry-detector' '{'
		// //	'key' entryKey=NAME_OBJECT ';'
		//
		////	'subtype' subtype=[DictionaryDeclaration|QualifiedName] ';'
		// //	'}';
		// //
		// //IntegerEntryValueSubtypeDetector:
		//
		////	'int-value-detector' '{'
		// //	'key' entryKey=NAME_OBJECT ';'
		//
		////	'subtypes' '{' entries+=IntegerEntryValueSubtypeDetectorEntry+ '}'
		// //	'}';
		// //
		//
		////IntegerEntryValueSubtypeDetectorEntry:
		//
		////	intValue=IntLiteral '->' subtype=[DictionaryDeclaration|QualifiedName] ';';
		// //
		//
		////DictionaryDeclarationGlobalSubtypes:
		// //	'subtypes' NAME_OBJECT;
		// DictionaryEntry:
		//	key=NAME_OBJECT ("as" alias=ID)? cached?="cached"? required?="required"? inheritable?="inheritable"?
		//	indirectReference=IndirectReference? value=AbstractEntryValue requiresCustomValidation?="custom-validation"?
		//	requiresCustomDefault?="custom-default"? ("(" since=SinceVersion ")")? ";";
		public ParserRule getRule() { return rule; }

		//key=NAME_OBJECT ("as" alias=ID)? cached?="cached"? required?="required"? inheritable?="inheritable"?
		//indirectReference=IndirectReference? value=AbstractEntryValue requiresCustomValidation?="custom-validation"?
		//requiresCustomDefault?="custom-default"? ("(" since=SinceVersion ")")? ";"
		public Group getGroup() { return cGroup; }

		//key=NAME_OBJECT
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }

		//NAME_OBJECT
		public RuleCall getKeyNAME_OBJECTTerminalRuleCall_0_0() { return cKeyNAME_OBJECTTerminalRuleCall_0_0; }

		//("as" alias=ID)?
		public Group getGroup_1() { return cGroup_1; }

		//"as"
		public Keyword getAsKeyword_1_0() { return cAsKeyword_1_0; }

		//alias=ID
		public Assignment getAliasAssignment_1_1() { return cAliasAssignment_1_1; }

		//ID
		public RuleCall getAliasIDTerminalRuleCall_1_1_0() { return cAliasIDTerminalRuleCall_1_1_0; }

		//cached?="cached"?
		public Assignment getCachedAssignment_2() { return cCachedAssignment_2; }

		//"cached"
		public Keyword getCachedCachedKeyword_2_0() { return cCachedCachedKeyword_2_0; }

		//required?="required"?
		public Assignment getRequiredAssignment_3() { return cRequiredAssignment_3; }

		//"required"
		public Keyword getRequiredRequiredKeyword_3_0() { return cRequiredRequiredKeyword_3_0; }

		//inheritable?="inheritable"?
		public Assignment getInheritableAssignment_4() { return cInheritableAssignment_4; }

		//"inheritable"
		public Keyword getInheritableInheritableKeyword_4_0() { return cInheritableInheritableKeyword_4_0; }

		//indirectReference=IndirectReference?
		public Assignment getIndirectReferenceAssignment_5() { return cIndirectReferenceAssignment_5; }

		//IndirectReference
		public RuleCall getIndirectReferenceIndirectReferenceEnumRuleCall_5_0() { return cIndirectReferenceIndirectReferenceEnumRuleCall_5_0; }

		//value=AbstractEntryValue
		public Assignment getValueAssignment_6() { return cValueAssignment_6; }

		//AbstractEntryValue
		public RuleCall getValueAbstractEntryValueParserRuleCall_6_0() { return cValueAbstractEntryValueParserRuleCall_6_0; }

		//requiresCustomValidation?="custom-validation"?
		public Assignment getRequiresCustomValidationAssignment_7() { return cRequiresCustomValidationAssignment_7; }

		//"custom-validation"
		public Keyword getRequiresCustomValidationCustomValidationKeyword_7_0() { return cRequiresCustomValidationCustomValidationKeyword_7_0; }

		//requiresCustomDefault?="custom-default"?
		public Assignment getRequiresCustomDefaultAssignment_8() { return cRequiresCustomDefaultAssignment_8; }

		//"custom-default"
		public Keyword getRequiresCustomDefaultCustomDefaultKeyword_8_0() { return cRequiresCustomDefaultCustomDefaultKeyword_8_0; }

		//("(" since=SinceVersion ")")?
		public Group getGroup_9() { return cGroup_9; }

		//"("
		public Keyword getLeftParenthesisKeyword_9_0() { return cLeftParenthesisKeyword_9_0; }

		//since=SinceVersion
		public Assignment getSinceAssignment_9_1() { return cSinceAssignment_9_1; }

		//SinceVersion
		public RuleCall getSinceSinceVersionEnumRuleCall_9_1_0() { return cSinceSinceVersionEnumRuleCall_9_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_9_2() { return cRightParenthesisKeyword_9_2; }

		//";"
		public Keyword getSemicolonKeyword_10() { return cSemicolonKeyword_10; }
	}

	public class PackageDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PackageDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsAbstractDeclarationParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//PackageDeclaration:
		//	"package" name=QualifiedName "{" elements+=AbstractDeclaration* "}";
		public ParserRule getRule() { return rule; }

		//"package" name=QualifiedName "{" elements+=AbstractDeclaration* "}"
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//elements+=AbstractDeclaration*
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }

		//AbstractDeclaration
		public RuleCall getElementsAbstractDeclarationParserRuleCall_3_0() { return cElementsAbstractDeclarationParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class BitFlagsDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BitFlagsDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSpecificationReferenceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSpecificationReferenceSpecificationReferenceParserRuleCall_0_0 = (RuleCall)cSpecificationReferenceAssignment_0.eContents().get(0);
		private final Keyword cBitFlagsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSinceAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSinceSinceVersionEnumRuleCall_3_1_0 = (RuleCall)cSinceAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDeclarationsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDeclarationsBitFlagsDeclarationPartParserRuleCall_5_0 = (RuleCall)cDeclarationsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//BitFlagsDeclaration:
		//	specificationReference=SpecificationReference "bit-flags" name=ValidID ("(" since=SinceVersion ")")? "{"
		//	declarations+=BitFlagsDeclarationPart+ "}";
		public ParserRule getRule() { return rule; }

		//specificationReference=SpecificationReference "bit-flags" name=ValidID ("(" since=SinceVersion ")")? "{"
		//declarations+=BitFlagsDeclarationPart+ "}"
		public Group getGroup() { return cGroup; }

		//specificationReference=SpecificationReference
		public Assignment getSpecificationReferenceAssignment_0() { return cSpecificationReferenceAssignment_0; }

		//SpecificationReference
		public RuleCall getSpecificationReferenceSpecificationReferenceParserRuleCall_0_0() { return cSpecificationReferenceSpecificationReferenceParserRuleCall_0_0; }

		//"bit-flags"
		public Keyword getBitFlagsKeyword_1() { return cBitFlagsKeyword_1; }

		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }

		//("(" since=SinceVersion ")")?
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//since=SinceVersion
		public Assignment getSinceAssignment_3_1() { return cSinceAssignment_3_1; }

		//SinceVersion
		public RuleCall getSinceSinceVersionEnumRuleCall_3_1_0() { return cSinceSinceVersionEnumRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//declarations+=BitFlagsDeclarationPart+
		public Assignment getDeclarationsAssignment_5() { return cDeclarationsAssignment_5; }

		//BitFlagsDeclarationPart
		public RuleCall getDeclarationsBitFlagsDeclarationPartParserRuleCall_5_0() { return cDeclarationsBitFlagsDeclarationPartParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class BitFlagsDeclarationPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BitFlagsDeclarationPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIndexAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIndexINTTerminalRuleCall_0_0 = (RuleCall)cIndexAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSinceAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSinceSinceVersionEnumRuleCall_3_1_0 = (RuleCall)cSinceAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//BitFlagsDeclarationPart:
		//	index=INT "->" name=ValidID ("(" since=SinceVersion ")")? ";";
		public ParserRule getRule() { return rule; }

		//index=INT "->" name=ValidID ("(" since=SinceVersion ")")? ";"
		public Group getGroup() { return cGroup; }

		//index=INT
		public Assignment getIndexAssignment_0() { return cIndexAssignment_0; }

		//INT
		public RuleCall getIndexINTTerminalRuleCall_0_0() { return cIndexINTTerminalRuleCall_0_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }

		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }

		//("(" since=SinceVersion ")")?
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//since=SinceVersion
		public Assignment getSinceAssignment_3_1() { return cSinceAssignment_3_1; }

		//SinceVersion
		public RuleCall getSinceSinceVersionEnumRuleCall_3_1_0() { return cSinceSinceVersionEnumRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class NameEnumDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NameEnumDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNameEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSinceAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSinceSinceVersionEnumRuleCall_2_1_0 = (RuleCall)cSinceAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDeclarationsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDeclarationsNameEnumDeclarationPartParserRuleCall_4_0 = (RuleCall)cDeclarationsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cDeclarationsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cDeclarationsNameEnumDeclarationPartParserRuleCall_5_1_0 = (RuleCall)cDeclarationsAssignment_5_1.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//NameEnumDeclaration:
		//	"name-enum" name=ValidID ("(" since=SinceVersion ")")? "{" declarations+=NameEnumDeclarationPart (","
		//	declarations+=NameEnumDeclarationPart)* ","? // ignore trailing comma, just like Java does 
		// "}";
		public ParserRule getRule() { return rule; }

		//"name-enum" name=ValidID ("(" since=SinceVersion ")")? "{" declarations+=NameEnumDeclarationPart (","
		//declarations+=NameEnumDeclarationPart)* ","? // ignore trailing comma, just like Java does 
		// "}"
		public Group getGroup() { return cGroup; }

		//"name-enum"
		public Keyword getNameEnumKeyword_0() { return cNameEnumKeyword_0; }

		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }

		//("(" since=SinceVersion ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//since=SinceVersion
		public Assignment getSinceAssignment_2_1() { return cSinceAssignment_2_1; }

		//SinceVersion
		public RuleCall getSinceSinceVersionEnumRuleCall_2_1_0() { return cSinceSinceVersionEnumRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//declarations+=NameEnumDeclarationPart
		public Assignment getDeclarationsAssignment_4() { return cDeclarationsAssignment_4; }

		//NameEnumDeclarationPart
		public RuleCall getDeclarationsNameEnumDeclarationPartParserRuleCall_4_0() { return cDeclarationsNameEnumDeclarationPartParserRuleCall_4_0; }

		//("," declarations+=NameEnumDeclarationPart)*
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//declarations+=NameEnumDeclarationPart
		public Assignment getDeclarationsAssignment_5_1() { return cDeclarationsAssignment_5_1; }

		//NameEnumDeclarationPart
		public RuleCall getDeclarationsNameEnumDeclarationPartParserRuleCall_5_1_0() { return cDeclarationsNameEnumDeclarationPartParserRuleCall_5_1_0; }

		//","?
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class NameEnumDeclarationPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NameEnumDeclarationPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConstantAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConstantNAME_OBJECTTerminalRuleCall_0_0 = (RuleCall)cConstantAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAliasAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAliasIDTerminalRuleCall_1_1_0 = (RuleCall)cAliasAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSinceAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSinceSinceVersionEnumRuleCall_2_1_0 = (RuleCall)cSinceAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//NameEnumDeclarationPart:
		//	constant=NAME_OBJECT ("as" alias=ID)? ("(" since=SinceVersion ")")?;
		public ParserRule getRule() { return rule; }

		//constant=NAME_OBJECT ("as" alias=ID)? ("(" since=SinceVersion ")")?
		public Group getGroup() { return cGroup; }

		//constant=NAME_OBJECT
		public Assignment getConstantAssignment_0() { return cConstantAssignment_0; }

		//NAME_OBJECT
		public RuleCall getConstantNAME_OBJECTTerminalRuleCall_0_0() { return cConstantNAME_OBJECTTerminalRuleCall_0_0; }

		//("as" alias=ID)?
		public Group getGroup_1() { return cGroup_1; }

		//"as"
		public Keyword getAsKeyword_1_0() { return cAsKeyword_1_0; }

		//alias=ID
		public Assignment getAliasAssignment_1_1() { return cAliasAssignment_1_1; }

		//ID
		public RuleCall getAliasIDTerminalRuleCall_1_1_0() { return cAliasIDTerminalRuleCall_1_1_0; }

		//("(" since=SinceVersion ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//since=SinceVersion
		public Assignment getSinceAssignment_2_1() { return cSinceAssignment_2_1; }

		//SinceVersion
		public RuleCall getSinceSinceVersionEnumRuleCall_2_1_0() { return cSinceSinceVersionEnumRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}

	public class AbstractEntryValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractEntryValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNullObjectEntryValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNameTreeEntryValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNumberTreeEntryValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNameObjectEntryValueParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cNumberObjectEntryValueParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cIntegerObjectEntryValueParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cRealObjectEntryValueParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cNameEnumEntryValueParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cReferenceEntryValueParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cParentReferenceEntryValueParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cDictionaryDeclarationEntryValueParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cDictionaryObjectEntryValueParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cArrayEntryValueParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cMappingDictEntryValueParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cBooleanEntryValueParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cDateEntryValueParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cAlternativeEntryValueParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cObjectEntryValueParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		private final RuleCall cStringEntryValueParserRuleCall_18 = (RuleCall)cAlternatives.eContents().get(18);
		private final RuleCall cArrayMappedEntryValueParserRuleCall_19 = (RuleCall)cAlternatives.eContents().get(19);
		private final RuleCall cBitFlagsEntryValueParserRuleCall_20 = (RuleCall)cAlternatives.eContents().get(20);
		
		//AbstractEntryValue:
		//	NullObjectEntryValue | NameTreeEntryValue | NumberTreeEntryValue | NameObjectEntryValue | NumberObjectEntryValue |
		//	IntegerObjectEntryValue | RealObjectEntryValue | NameEnumEntryValue | ReferenceEntryValue | ParentReferenceEntryValue
		//	| DictionaryDeclarationEntryValue | DictionaryObjectEntryValue | ArrayEntryValue | MappingDictEntryValue |
		//	BooleanEntryValue | DateEntryValue | AlternativeEntryValue | ObjectEntryValue | StringEntryValue |
		//	ArrayMappedEntryValue | BitFlagsEntryValue;
		public ParserRule getRule() { return rule; }

		//NullObjectEntryValue | NameTreeEntryValue | NumberTreeEntryValue | NameObjectEntryValue | NumberObjectEntryValue |
		//IntegerObjectEntryValue | RealObjectEntryValue | NameEnumEntryValue | ReferenceEntryValue | ParentReferenceEntryValue
		//| DictionaryDeclarationEntryValue | DictionaryObjectEntryValue | ArrayEntryValue | MappingDictEntryValue |
		//BooleanEntryValue | DateEntryValue | AlternativeEntryValue | ObjectEntryValue | StringEntryValue |
		//ArrayMappedEntryValue | BitFlagsEntryValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//NullObjectEntryValue
		public RuleCall getNullObjectEntryValueParserRuleCall_0() { return cNullObjectEntryValueParserRuleCall_0; }

		//NameTreeEntryValue
		public RuleCall getNameTreeEntryValueParserRuleCall_1() { return cNameTreeEntryValueParserRuleCall_1; }

		//NumberTreeEntryValue
		public RuleCall getNumberTreeEntryValueParserRuleCall_2() { return cNumberTreeEntryValueParserRuleCall_2; }

		//NameObjectEntryValue
		public RuleCall getNameObjectEntryValueParserRuleCall_3() { return cNameObjectEntryValueParserRuleCall_3; }

		//NumberObjectEntryValue
		public RuleCall getNumberObjectEntryValueParserRuleCall_4() { return cNumberObjectEntryValueParserRuleCall_4; }

		//IntegerObjectEntryValue
		public RuleCall getIntegerObjectEntryValueParserRuleCall_5() { return cIntegerObjectEntryValueParserRuleCall_5; }

		//RealObjectEntryValue
		public RuleCall getRealObjectEntryValueParserRuleCall_6() { return cRealObjectEntryValueParserRuleCall_6; }

		//NameEnumEntryValue
		public RuleCall getNameEnumEntryValueParserRuleCall_7() { return cNameEnumEntryValueParserRuleCall_7; }

		//ReferenceEntryValue
		public RuleCall getReferenceEntryValueParserRuleCall_8() { return cReferenceEntryValueParserRuleCall_8; }

		//ParentReferenceEntryValue
		public RuleCall getParentReferenceEntryValueParserRuleCall_9() { return cParentReferenceEntryValueParserRuleCall_9; }

		//DictionaryDeclarationEntryValue
		public RuleCall getDictionaryDeclarationEntryValueParserRuleCall_10() { return cDictionaryDeclarationEntryValueParserRuleCall_10; }

		//DictionaryObjectEntryValue
		public RuleCall getDictionaryObjectEntryValueParserRuleCall_11() { return cDictionaryObjectEntryValueParserRuleCall_11; }

		//ArrayEntryValue
		public RuleCall getArrayEntryValueParserRuleCall_12() { return cArrayEntryValueParserRuleCall_12; }

		//MappingDictEntryValue
		public RuleCall getMappingDictEntryValueParserRuleCall_13() { return cMappingDictEntryValueParserRuleCall_13; }

		//BooleanEntryValue
		public RuleCall getBooleanEntryValueParserRuleCall_14() { return cBooleanEntryValueParserRuleCall_14; }

		//DateEntryValue
		public RuleCall getDateEntryValueParserRuleCall_15() { return cDateEntryValueParserRuleCall_15; }

		//AlternativeEntryValue
		public RuleCall getAlternativeEntryValueParserRuleCall_16() { return cAlternativeEntryValueParserRuleCall_16; }

		//ObjectEntryValue
		public RuleCall getObjectEntryValueParserRuleCall_17() { return cObjectEntryValueParserRuleCall_17; }

		//StringEntryValue
		public RuleCall getStringEntryValueParserRuleCall_18() { return cStringEntryValueParserRuleCall_18; }

		//ArrayMappedEntryValue
		public RuleCall getArrayMappedEntryValueParserRuleCall_19() { return cArrayMappedEntryValueParserRuleCall_19; }

		//BitFlagsEntryValue
		public RuleCall getBitFlagsEntryValueParserRuleCall_20() { return cBitFlagsEntryValueParserRuleCall_20; }
	}

	public class NullObjectEntryValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NullObjectEntryValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNullObjectEntryValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNullKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//NullObjectEntryValue:
		//	{NullObjectEntryValue} "null";
		public ParserRule getRule() { return rule; }

		//{NullObjectEntryValue} "null"
		public Group getGroup() { return cGroup; }

		//{NullObjectEntryValue}
		public Action getNullObjectEntryValueAction_0() { return cNullObjectEntryValueAction_0; }

		//"null"
		public Keyword getNullKeyword_1() { return cNullKeyword_1; }
	}

	public class NameObjectEntryValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NameObjectEntryValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNameObjectEntryValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNameKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cHasMustBeAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final Keyword cHasMustBeMustBeKeyword_2_0_0_0 = (Keyword)cHasMustBeAssignment_2_0_0.eContents().get(0);
		private final Assignment cRequiredValueAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cRequiredValueNAME_OBJECTTerminalRuleCall_2_0_1_0 = (RuleCall)cRequiredValueAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cHasDefaultAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final Keyword cHasDefaultDefaultKeyword_2_1_0_0 = (Keyword)cHasDefaultAssignment_2_1_0.eContents().get(0);
		private final Assignment cDefaultValueAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cDefaultValueNAME_OBJECTTerminalRuleCall_2_1_1_0 = (RuleCall)cDefaultValueAssignment_2_1_1.eContents().get(0);
		
		//NameObjectEntryValue:
		//	{NameObjectEntryValue} "name" (hasMustBe?="must-be" requiredValue=NAME_OBJECT | hasDefault?="default"
		//	defaultValue=NAME_OBJECT)?;
		public ParserRule getRule() { return rule; }

		//{NameObjectEntryValue} "name" (hasMustBe?="must-be" requiredValue=NAME_OBJECT | hasDefault?="default"
		//defaultValue=NAME_OBJECT)?
		public Group getGroup() { return cGroup; }

		//{NameObjectEntryValue}
		public Action getNameObjectEntryValueAction_0() { return cNameObjectEntryValueAction_0; }

		//"name"
		public Keyword getNameKeyword_1() { return cNameKeyword_1; }

		//(hasMustBe?="must-be" requiredValue=NAME_OBJECT | hasDefault?="default" defaultValue=NAME_OBJECT)?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//hasMustBe?="must-be" requiredValue=NAME_OBJECT
		public Group getGroup_2_0() { return cGroup_2_0; }

		//hasMustBe?="must-be"
		public Assignment getHasMustBeAssignment_2_0_0() { return cHasMustBeAssignment_2_0_0; }

		//"must-be"
		public Keyword getHasMustBeMustBeKeyword_2_0_0_0() { return cHasMustBeMustBeKeyword_2_0_0_0; }

		//requiredValue=NAME_OBJECT
		public Assignment getRequiredValueAssignment_2_0_1() { return cRequiredValueAssignment_2_0_1; }

		//NAME_OBJECT
		public RuleCall getRequiredValueNAME_OBJECTTerminalRuleCall_2_0_1_0() { return cRequiredValueNAME_OBJECTTerminalRuleCall_2_0_1_0; }

		//hasDefault?="default" defaultValue=NAME_OBJECT
		public Group getGroup_2_1() { return cGroup_2_1; }

		//hasDefault?="default"
		public Assignment getHasDefaultAssignment_2_1_0() { return cHasDefaultAssignment_2_1_0; }

		//"default"
		public Keyword getHasDefaultDefaultKeyword_2_1_0_0() { return cHasDefaultDefaultKeyword_2_1_0_0; }

		//defaultValue=NAME_OBJECT
		public Assignment getDefaultValueAssignment_2_1_1() { return cDefaultValueAssignment_2_1_1; }

		//NAME_OBJECT
		public RuleCall getDefaultValueNAME_OBJECTTerminalRuleCall_2_1_1_0() { return cDefaultValueNAME_OBJECTTerminalRuleCall_2_1_1_0; }
	}

	public class NumberObjectEntryValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumberObjectEntryValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNumberObjectEntryValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNumKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cRuleAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cRuleNumberValidationRuleParserRuleCall_2_1_0 = (RuleCall)cRuleAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Assignment cHasMustBeAssignment_3_0_0 = (Assignment)cGroup_3_0.eContents().get(0);
		private final Keyword cHasMustBeMustBeKeyword_3_0_0_0 = (Keyword)cHasMustBeAssignment_3_0_0.eContents().get(0);
		private final Assignment cRequiredValueAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cRequiredValueNumberLiteralParserRuleCall_3_0_1_0 = (RuleCall)cRequiredValueAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Assignment cHasDefaultAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final Keyword cHasDefaultDefaultKeyword_3_1_0_0 = (Keyword)cHasDefaultAssignment_3_1_0.eContents().get(0);
		private final Assignment cDefaultValueAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cDefaultValueNumberLiteralParserRuleCall_3_1_1_0 = (RuleCall)cDefaultValueAssignment_3_1_1.eContents().get(0);
		
		//NumberObjectEntryValue:
		//	{NumberObjectEntryValue} "num" ("[" rule=NumberValidationRule "]")? (hasMustBe?="must-be" requiredValue=NumberLiteral
		//	| hasDefault?="default" defaultValue=NumberLiteral)?;
		public ParserRule getRule() { return rule; }

		//{NumberObjectEntryValue} "num" ("[" rule=NumberValidationRule "]")? (hasMustBe?="must-be" requiredValue=NumberLiteral |
		//hasDefault?="default" defaultValue=NumberLiteral)?
		public Group getGroup() { return cGroup; }

		//{NumberObjectEntryValue}
		public Action getNumberObjectEntryValueAction_0() { return cNumberObjectEntryValueAction_0; }

		//"num"
		public Keyword getNumKeyword_1() { return cNumKeyword_1; }

		//("[" rule=NumberValidationRule "]")?
		public Group getGroup_2() { return cGroup_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }

		//rule=NumberValidationRule
		public Assignment getRuleAssignment_2_1() { return cRuleAssignment_2_1; }

		//NumberValidationRule
		public RuleCall getRuleNumberValidationRuleParserRuleCall_2_1_0() { return cRuleNumberValidationRuleParserRuleCall_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }

		//(hasMustBe?="must-be" requiredValue=NumberLiteral | hasDefault?="default" defaultValue=NumberLiteral)?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//hasMustBe?="must-be" requiredValue=NumberLiteral
		public Group getGroup_3_0() { return cGroup_3_0; }

		//hasMustBe?="must-be"
		public Assignment getHasMustBeAssignment_3_0_0() { return cHasMustBeAssignment_3_0_0; }

		//"must-be"
		public Keyword getHasMustBeMustBeKeyword_3_0_0_0() { return cHasMustBeMustBeKeyword_3_0_0_0; }

		//requiredValue=NumberLiteral
		public Assignment getRequiredValueAssignment_3_0_1() { return cRequiredValueAssignment_3_0_1; }

		//NumberLiteral
		public RuleCall getRequiredValueNumberLiteralParserRuleCall_3_0_1_0() { return cRequiredValueNumberLiteralParserRuleCall_3_0_1_0; }

		//hasDefault?="default" defaultValue=NumberLiteral
		public Group getGroup_3_1() { return cGroup_3_1; }

		//hasDefault?="default"
		public Assignment getHasDefaultAssignment_3_1_0() { return cHasDefaultAssignment_3_1_0; }

		//"default"
		public Keyword getHasDefaultDefaultKeyword_3_1_0_0() { return cHasDefaultDefaultKeyword_3_1_0_0; }

		//defaultValue=NumberLiteral
		public Assignment getDefaultValueAssignment_3_1_1() { return cDefaultValueAssignment_3_1_1; }

		//NumberLiteral
		public RuleCall getDefaultValueNumberLiteralParserRuleCall_3_1_1_0() { return cDefaultValueNumberLiteralParserRuleCall_3_1_1_0; }
	}

	public class NumberValidationRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumberValidationRule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumberInclusiveRangeValidationRuleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNumberGreaterValidationRuleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNumberGreaterEqualsValidationRuleParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNumberValuesValidationRuleParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//NumberValidationRule:
		//	NumberInclusiveRangeValidationRule | NumberGreaterValidationRule | NumberGreaterEqualsValidationRule |
		//	NumberValuesValidationRule;
		public ParserRule getRule() { return rule; }

		//NumberInclusiveRangeValidationRule | NumberGreaterValidationRule | NumberGreaterEqualsValidationRule |
		//NumberValuesValidationRule
		public Alternatives getAlternatives() { return cAlternatives; }

		//NumberInclusiveRangeValidationRule
		public RuleCall getNumberInclusiveRangeValidationRuleParserRuleCall_0() { return cNumberInclusiveRangeValidationRuleParserRuleCall_0; }

		//NumberGreaterValidationRule
		public RuleCall getNumberGreaterValidationRuleParserRuleCall_1() { return cNumberGreaterValidationRuleParserRuleCall_1; }

		//NumberGreaterEqualsValidationRule
		public RuleCall getNumberGreaterEqualsValidationRuleParserRuleCall_2() { return cNumberGreaterEqualsValidationRuleParserRuleCall_2; }

		//NumberValuesValidationRule
		public RuleCall getNumberValuesValidationRuleParserRuleCall_3() { return cNumberValuesValidationRuleParserRuleCall_3; }
	}

	public class NumberInclusiveRangeValidationRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumberInclusiveRangeValidationRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRangeInclKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLowerBoundAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLowerBoundNumberLiteralParserRuleCall_1_0 = (RuleCall)cLowerBoundAssignment_1.eContents().get(0);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cUpperBoundAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUpperBoundNumberLiteralParserRuleCall_3_0 = (RuleCall)cUpperBoundAssignment_3.eContents().get(0);
		
		//NumberInclusiveRangeValidationRule:
		//	"range-incl" lowerBound=NumberLiteral "to" upperBound=NumberLiteral;
		public ParserRule getRule() { return rule; }

		//"range-incl" lowerBound=NumberLiteral "to" upperBound=NumberLiteral
		public Group getGroup() { return cGroup; }

		//"range-incl"
		public Keyword getRangeInclKeyword_0() { return cRangeInclKeyword_0; }

		//lowerBound=NumberLiteral
		public Assignment getLowerBoundAssignment_1() { return cLowerBoundAssignment_1; }

		//NumberLiteral
		public RuleCall getLowerBoundNumberLiteralParserRuleCall_1_0() { return cLowerBoundNumberLiteralParserRuleCall_1_0; }

		//"to"
		public Keyword getToKeyword_2() { return cToKeyword_2; }

		//upperBound=NumberLiteral
		public Assignment getUpperBoundAssignment_3() { return cUpperBoundAssignment_3; }

		//NumberLiteral
		public RuleCall getUpperBoundNumberLiteralParserRuleCall_3_0() { return cUpperBoundNumberLiteralParserRuleCall_3_0; }
	}

	public class NumberGreaterValidationRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumberGreaterValidationRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGreaterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMinValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMinValueNumberLiteralParserRuleCall_1_0 = (RuleCall)cMinValueAssignment_1.eContents().get(0);
		
		//NumberGreaterValidationRule:
		//	"greater" minValue=NumberLiteral;
		public ParserRule getRule() { return rule; }

		//"greater" minValue=NumberLiteral
		public Group getGroup() { return cGroup; }

		//"greater"
		public Keyword getGreaterKeyword_0() { return cGreaterKeyword_0; }

		//minValue=NumberLiteral
		public Assignment getMinValueAssignment_1() { return cMinValueAssignment_1; }

		//NumberLiteral
		public RuleCall getMinValueNumberLiteralParserRuleCall_1_0() { return cMinValueNumberLiteralParserRuleCall_1_0; }
	}

	public class NumberGreaterEqualsValidationRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumberGreaterEqualsValidationRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGreaterEqualsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMinValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMinValueNumberLiteralParserRuleCall_1_0 = (RuleCall)cMinValueAssignment_1.eContents().get(0);
		
		//NumberGreaterEqualsValidationRule:
		//	"greater-equals" minValue=NumberLiteral;
		public ParserRule getRule() { return rule; }

		//"greater-equals" minValue=NumberLiteral
		public Group getGroup() { return cGroup; }

		//"greater-equals"
		public Keyword getGreaterEqualsKeyword_0() { return cGreaterEqualsKeyword_0; }

		//minValue=NumberLiteral
		public Assignment getMinValueAssignment_1() { return cMinValueAssignment_1; }

		//NumberLiteral
		public RuleCall getMinValueNumberLiteralParserRuleCall_1_0() { return cMinValueNumberLiteralParserRuleCall_1_0; }
	}

	public class NumberValuesValidationRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumberValuesValidationRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cValuesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueNumberValuesValidationRuleEntryParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueNumberValuesValidationRuleEntryParserRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		
		//NumberValuesValidationRule:
		//	"values" value+=NumberValuesValidationRuleEntry ("," value+=NumberValuesValidationRuleEntry)*;
		public ParserRule getRule() { return rule; }

		//"values" value+=NumberValuesValidationRuleEntry ("," value+=NumberValuesValidationRuleEntry)*
		public Group getGroup() { return cGroup; }

		//"values"
		public Keyword getValuesKeyword_0() { return cValuesKeyword_0; }

		//value+=NumberValuesValidationRuleEntry
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//NumberValuesValidationRuleEntry
		public RuleCall getValueNumberValuesValidationRuleEntryParserRuleCall_1_0() { return cValueNumberValuesValidationRuleEntryParserRuleCall_1_0; }

		//("," value+=NumberValuesValidationRuleEntry)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//value+=NumberValuesValidationRuleEntry
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//NumberValuesValidationRuleEntry
		public RuleCall getValueNumberValuesValidationRuleEntryParserRuleCall_2_1_0() { return cValueNumberValuesValidationRuleEntryParserRuleCall_2_1_0; }
	}

	public class NumberValuesValidationRuleEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumberValuesValidationRuleEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueNumberLiteralParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSinceAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSinceSinceVersionEnumRuleCall_1_1_0 = (RuleCall)cSinceAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//NumberValuesValidationRuleEntry:
		//	value=NumberLiteral ("(" since=SinceVersion ")")?;
		public ParserRule getRule() { return rule; }

		//value=NumberLiteral ("(" since=SinceVersion ")")?
		public Group getGroup() { return cGroup; }

		//value=NumberLiteral
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//NumberLiteral
		public RuleCall getValueNumberLiteralParserRuleCall_0_0() { return cValueNumberLiteralParserRuleCall_0_0; }

		//("(" since=SinceVersion ")")?
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//since=SinceVersion
		public Assignment getSinceAssignment_1_1() { return cSinceAssignment_1_1; }

		//SinceVersion
		public RuleCall getSinceSinceVersionEnumRuleCall_1_1_0() { return cSinceSinceVersionEnumRuleCall_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}

	public class IntegerObjectEntryValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerObjectEntryValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntegerObjectEntryValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIntKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cRuleAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cRuleIntegerValidationRuleParserRuleCall_2_1_0 = (RuleCall)cRuleAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Assignment cHasMustBeAssignment_3_0_0 = (Assignment)cGroup_3_0.eContents().get(0);
		private final Keyword cHasMustBeMustBeKeyword_3_0_0_0 = (Keyword)cHasMustBeAssignment_3_0_0.eContents().get(0);
		private final Assignment cRequiredValueAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cRequiredValueIntLiteralParserRuleCall_3_0_1_0 = (RuleCall)cRequiredValueAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Assignment cHasDefaultAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final Keyword cHasDefaultDefaultKeyword_3_1_0_0 = (Keyword)cHasDefaultAssignment_3_1_0.eContents().get(0);
		private final Assignment cDefaultValueAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cDefaultValueIntLiteralParserRuleCall_3_1_1_0 = (RuleCall)cDefaultValueAssignment_3_1_1.eContents().get(0);
		
		//IntegerObjectEntryValue:
		//	{IntegerObjectEntryValue} "int" ("[" rule=IntegerValidationRule "]")? (hasMustBe?="must-be" requiredValue=IntLiteral
		//	| hasDefault?="default" defaultValue=IntLiteral)?;
		public ParserRule getRule() { return rule; }

		//{IntegerObjectEntryValue} "int" ("[" rule=IntegerValidationRule "]")? (hasMustBe?="must-be" requiredValue=IntLiteral |
		//hasDefault?="default" defaultValue=IntLiteral)?
		public Group getGroup() { return cGroup; }

		//{IntegerObjectEntryValue}
		public Action getIntegerObjectEntryValueAction_0() { return cIntegerObjectEntryValueAction_0; }

		//"int"
		public Keyword getIntKeyword_1() { return cIntKeyword_1; }

		//("[" rule=IntegerValidationRule "]")?
		public Group getGroup_2() { return cGroup_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }

		//rule=IntegerValidationRule
		public Assignment getRuleAssignment_2_1() { return cRuleAssignment_2_1; }

		//IntegerValidationRule
		public RuleCall getRuleIntegerValidationRuleParserRuleCall_2_1_0() { return cRuleIntegerValidationRuleParserRuleCall_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }

		//(hasMustBe?="must-be" requiredValue=IntLiteral | hasDefault?="default" defaultValue=IntLiteral)?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//hasMustBe?="must-be" requiredValue=IntLiteral
		public Group getGroup_3_0() { return cGroup_3_0; }

		//hasMustBe?="must-be"
		public Assignment getHasMustBeAssignment_3_0_0() { return cHasMustBeAssignment_3_0_0; }

		//"must-be"
		public Keyword getHasMustBeMustBeKeyword_3_0_0_0() { return cHasMustBeMustBeKeyword_3_0_0_0; }

		//requiredValue=IntLiteral
		public Assignment getRequiredValueAssignment_3_0_1() { return cRequiredValueAssignment_3_0_1; }

		//IntLiteral
		public RuleCall getRequiredValueIntLiteralParserRuleCall_3_0_1_0() { return cRequiredValueIntLiteralParserRuleCall_3_0_1_0; }

		//hasDefault?="default" defaultValue=IntLiteral
		public Group getGroup_3_1() { return cGroup_3_1; }

		//hasDefault?="default"
		public Assignment getHasDefaultAssignment_3_1_0() { return cHasDefaultAssignment_3_1_0; }

		//"default"
		public Keyword getHasDefaultDefaultKeyword_3_1_0_0() { return cHasDefaultDefaultKeyword_3_1_0_0; }

		//defaultValue=IntLiteral
		public Assignment getDefaultValueAssignment_3_1_1() { return cDefaultValueAssignment_3_1_1; }

		//IntLiteral
		public RuleCall getDefaultValueIntLiteralParserRuleCall_3_1_1_0() { return cDefaultValueIntLiteralParserRuleCall_3_1_1_0; }
	}

	public class IntegerValidationRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerValidationRule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerInclusiveRangeValidationRuleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntegerValuesValidationRuleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIntegerGreaterValidationRuleParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIntegerGreaterEqualsValidationRuleParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//IntegerValidationRule:
		//	IntegerInclusiveRangeValidationRule | IntegerValuesValidationRule | IntegerGreaterValidationRule |
		//	IntegerGreaterEqualsValidationRule;
		public ParserRule getRule() { return rule; }

		//IntegerInclusiveRangeValidationRule | IntegerValuesValidationRule | IntegerGreaterValidationRule |
		//IntegerGreaterEqualsValidationRule
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntegerInclusiveRangeValidationRule
		public RuleCall getIntegerInclusiveRangeValidationRuleParserRuleCall_0() { return cIntegerInclusiveRangeValidationRuleParserRuleCall_0; }

		//IntegerValuesValidationRule
		public RuleCall getIntegerValuesValidationRuleParserRuleCall_1() { return cIntegerValuesValidationRuleParserRuleCall_1; }

		//IntegerGreaterValidationRule
		public RuleCall getIntegerGreaterValidationRuleParserRuleCall_2() { return cIntegerGreaterValidationRuleParserRuleCall_2; }

		//IntegerGreaterEqualsValidationRule
		public RuleCall getIntegerGreaterEqualsValidationRuleParserRuleCall_3() { return cIntegerGreaterEqualsValidationRuleParserRuleCall_3; }
	}

	public class IntegerInclusiveRangeValidationRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerInclusiveRangeValidationRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRangeInclKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLowerBoundAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLowerBoundIntLiteralParserRuleCall_1_0 = (RuleCall)cLowerBoundAssignment_1.eContents().get(0);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cUpperBoundAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUpperBoundIntLiteralParserRuleCall_3_0 = (RuleCall)cUpperBoundAssignment_3.eContents().get(0);
		
		//IntegerInclusiveRangeValidationRule:
		//	"range-incl" lowerBound=IntLiteral "to" upperBound=IntLiteral;
		public ParserRule getRule() { return rule; }

		//"range-incl" lowerBound=IntLiteral "to" upperBound=IntLiteral
		public Group getGroup() { return cGroup; }

		//"range-incl"
		public Keyword getRangeInclKeyword_0() { return cRangeInclKeyword_0; }

		//lowerBound=IntLiteral
		public Assignment getLowerBoundAssignment_1() { return cLowerBoundAssignment_1; }

		//IntLiteral
		public RuleCall getLowerBoundIntLiteralParserRuleCall_1_0() { return cLowerBoundIntLiteralParserRuleCall_1_0; }

		//"to"
		public Keyword getToKeyword_2() { return cToKeyword_2; }

		//upperBound=IntLiteral
		public Assignment getUpperBoundAssignment_3() { return cUpperBoundAssignment_3; }

		//IntLiteral
		public RuleCall getUpperBoundIntLiteralParserRuleCall_3_0() { return cUpperBoundIntLiteralParserRuleCall_3_0; }
	}

	public class IntegerValuesValidationRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerValuesValidationRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cValuesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueIntegerValuesValidationRuleEntryParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueIntegerValuesValidationRuleEntryParserRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		
		//IntegerValuesValidationRule:
		//	"values" value+=IntegerValuesValidationRuleEntry ("," value+=IntegerValuesValidationRuleEntry)*;
		public ParserRule getRule() { return rule; }

		//"values" value+=IntegerValuesValidationRuleEntry ("," value+=IntegerValuesValidationRuleEntry)*
		public Group getGroup() { return cGroup; }

		//"values"
		public Keyword getValuesKeyword_0() { return cValuesKeyword_0; }

		//value+=IntegerValuesValidationRuleEntry
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//IntegerValuesValidationRuleEntry
		public RuleCall getValueIntegerValuesValidationRuleEntryParserRuleCall_1_0() { return cValueIntegerValuesValidationRuleEntryParserRuleCall_1_0; }

		//("," value+=IntegerValuesValidationRuleEntry)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//value+=IntegerValuesValidationRuleEntry
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//IntegerValuesValidationRuleEntry
		public RuleCall getValueIntegerValuesValidationRuleEntryParserRuleCall_2_1_0() { return cValueIntegerValuesValidationRuleEntryParserRuleCall_2_1_0; }
	}

	public class IntegerGreaterValidationRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerGreaterValidationRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGreaterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMinValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMinValueIntLiteralParserRuleCall_1_0 = (RuleCall)cMinValueAssignment_1.eContents().get(0);
		
		//IntegerGreaterValidationRule:
		//	"greater" minValue=IntLiteral;
		public ParserRule getRule() { return rule; }

		//"greater" minValue=IntLiteral
		public Group getGroup() { return cGroup; }

		//"greater"
		public Keyword getGreaterKeyword_0() { return cGreaterKeyword_0; }

		//minValue=IntLiteral
		public Assignment getMinValueAssignment_1() { return cMinValueAssignment_1; }

		//IntLiteral
		public RuleCall getMinValueIntLiteralParserRuleCall_1_0() { return cMinValueIntLiteralParserRuleCall_1_0; }
	}

	public class IntegerGreaterEqualsValidationRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerGreaterEqualsValidationRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGreaterEqualsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMinValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMinValueNumberLiteralParserRuleCall_1_0 = (RuleCall)cMinValueAssignment_1.eContents().get(0);
		
		//IntegerGreaterEqualsValidationRule:
		//	"greater-equals" minValue=NumberLiteral;
		public ParserRule getRule() { return rule; }

		//"greater-equals" minValue=NumberLiteral
		public Group getGroup() { return cGroup; }

		//"greater-equals"
		public Keyword getGreaterEqualsKeyword_0() { return cGreaterEqualsKeyword_0; }

		//minValue=NumberLiteral
		public Assignment getMinValueAssignment_1() { return cMinValueAssignment_1; }

		//NumberLiteral
		public RuleCall getMinValueNumberLiteralParserRuleCall_1_0() { return cMinValueNumberLiteralParserRuleCall_1_0; }
	}

	public class IntegerValuesValidationRuleEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerValuesValidationRuleEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueIntLiteralParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSinceAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSinceSinceVersionEnumRuleCall_1_1_0 = (RuleCall)cSinceAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//IntegerValuesValidationRuleEntry:
		//	value=IntLiteral ("(" since=SinceVersion ")")?;
		public ParserRule getRule() { return rule; }

		//value=IntLiteral ("(" since=SinceVersion ")")?
		public Group getGroup() { return cGroup; }

		//value=IntLiteral
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//IntLiteral
		public RuleCall getValueIntLiteralParserRuleCall_0_0() { return cValueIntLiteralParserRuleCall_0_0; }

		//("(" since=SinceVersion ")")?
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//since=SinceVersion
		public Assignment getSinceAssignment_1_1() { return cSinceAssignment_1_1; }

		//SinceVersion
		public RuleCall getSinceSinceVersionEnumRuleCall_1_1_0() { return cSinceSinceVersionEnumRuleCall_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}

	public class RealObjectEntryValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RealObjectEntryValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRealObjectEntryValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRealKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cHasMustBeAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final Keyword cHasMustBeMustBeKeyword_2_0_0_0 = (Keyword)cHasMustBeAssignment_2_0_0.eContents().get(0);
		private final Assignment cRequiredValueAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cRequiredValueRealLiteralParserRuleCall_2_0_1_0 = (RuleCall)cRequiredValueAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cHasDefaultAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final Keyword cHasDefaultDefaultKeyword_2_1_0_0 = (Keyword)cHasDefaultAssignment_2_1_0.eContents().get(0);
		private final Assignment cDefaultValueAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cDefaultValueRealLiteralParserRuleCall_2_1_1_0 = (RuleCall)cDefaultValueAssignment_2_1_1.eContents().get(0);
		
		//RealObjectEntryValue:
		//	{RealObjectEntryValue} "real" (hasMustBe?="must-be" requiredValue=RealLiteral | hasDefault?="default"
		//	defaultValue=RealLiteral)?;
		public ParserRule getRule() { return rule; }

		//{RealObjectEntryValue} "real" (hasMustBe?="must-be" requiredValue=RealLiteral | hasDefault?="default"
		//defaultValue=RealLiteral)?
		public Group getGroup() { return cGroup; }

		//{RealObjectEntryValue}
		public Action getRealObjectEntryValueAction_0() { return cRealObjectEntryValueAction_0; }

		//"real"
		public Keyword getRealKeyword_1() { return cRealKeyword_1; }

		//(hasMustBe?="must-be" requiredValue=RealLiteral | hasDefault?="default" defaultValue=RealLiteral)?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//hasMustBe?="must-be" requiredValue=RealLiteral
		public Group getGroup_2_0() { return cGroup_2_0; }

		//hasMustBe?="must-be"
		public Assignment getHasMustBeAssignment_2_0_0() { return cHasMustBeAssignment_2_0_0; }

		//"must-be"
		public Keyword getHasMustBeMustBeKeyword_2_0_0_0() { return cHasMustBeMustBeKeyword_2_0_0_0; }

		//requiredValue=RealLiteral
		public Assignment getRequiredValueAssignment_2_0_1() { return cRequiredValueAssignment_2_0_1; }

		//RealLiteral
		public RuleCall getRequiredValueRealLiteralParserRuleCall_2_0_1_0() { return cRequiredValueRealLiteralParserRuleCall_2_0_1_0; }

		//hasDefault?="default" defaultValue=RealLiteral
		public Group getGroup_2_1() { return cGroup_2_1; }

		//hasDefault?="default"
		public Assignment getHasDefaultAssignment_2_1_0() { return cHasDefaultAssignment_2_1_0; }

		//"default"
		public Keyword getHasDefaultDefaultKeyword_2_1_0_0() { return cHasDefaultDefaultKeyword_2_1_0_0; }

		//defaultValue=RealLiteral
		public Assignment getDefaultValueAssignment_2_1_1() { return cDefaultValueAssignment_2_1_1; }

		//RealLiteral
		public RuleCall getDefaultValueRealLiteralParserRuleCall_2_1_1_0() { return cDefaultValueRealLiteralParserRuleCall_2_1_1_0; }
	}

	public class NameTreeEntryValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NameTreeEntryValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNameTreeEntryValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNameTreeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//NameTreeEntryValue:
		//	{NameTreeEntryValue} "name-tree";
		public ParserRule getRule() { return rule; }

		//{NameTreeEntryValue} "name-tree"
		public Group getGroup() { return cGroup; }

		//{NameTreeEntryValue}
		public Action getNameTreeEntryValueAction_0() { return cNameTreeEntryValueAction_0; }

		//"name-tree"
		public Keyword getNameTreeKeyword_1() { return cNameTreeKeyword_1; }
	}

	public class NumberTreeEntryValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumberTreeEntryValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNumberTreeEntryValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNumberTreeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//NumberTreeEntryValue:
		//	{NumberTreeEntryValue} "number-tree";
		public ParserRule getRule() { return rule; }

		//{NumberTreeEntryValue} "number-tree"
		public Group getGroup() { return cGroup; }

		//{NumberTreeEntryValue}
		public Action getNumberTreeEntryValueAction_0() { return cNumberTreeEntryValueAction_0; }

		//"number-tree"
		public Keyword getNumberTreeKeyword_1() { return cNumberTreeKeyword_1; }
	}

	public class ArrayEntryValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArrayEntryValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArrayKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRuleAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRuleArrayValidationRuleParserRuleCall_1_1_0 = (RuleCall)cRuleAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cLessThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIndirectReferenceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIndirectReferenceIndirectReferenceEnumRuleCall_3_0 = (RuleCall)cIndirectReferenceAssignment_3.eContents().get(0);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeAbstractEntryValueParserRuleCall_4_0 = (RuleCall)cTypeAssignment_4.eContents().get(0);
		private final Assignment cRequiresCustomValidationAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Keyword cRequiresCustomValidationCustomValidationKeyword_5_0 = (Keyword)cRequiresCustomValidationAssignment_5.eContents().get(0);
		private final Assignment cRequiresCustomDefaultAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final Keyword cRequiresCustomDefaultCustomDefaultKeyword_6_0 = (Keyword)cRequiresCustomDefaultAssignment_6.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ArrayEntryValue:
		//	"array" ("[" rule=ArrayValidationRule "]")? "<" indirectReference=IndirectReference? type=AbstractEntryValue
		//	requiresCustomValidation?="custom-validation"? requiresCustomDefault?="custom-default"? ">";
		public ParserRule getRule() { return rule; }

		//"array" ("[" rule=ArrayValidationRule "]")? "<" indirectReference=IndirectReference? type=AbstractEntryValue
		//requiresCustomValidation?="custom-validation"? requiresCustomDefault?="custom-default"? ">"
		public Group getGroup() { return cGroup; }

		//"array"
		public Keyword getArrayKeyword_0() { return cArrayKeyword_0; }

		//("[" rule=ArrayValidationRule "]")?
		public Group getGroup_1() { return cGroup_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//rule=ArrayValidationRule
		public Assignment getRuleAssignment_1_1() { return cRuleAssignment_1_1; }

		//ArrayValidationRule
		public RuleCall getRuleArrayValidationRuleParserRuleCall_1_1_0() { return cRuleArrayValidationRuleParserRuleCall_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }

		//"<"
		public Keyword getLessThanSignKeyword_2() { return cLessThanSignKeyword_2; }

		//indirectReference=IndirectReference?
		public Assignment getIndirectReferenceAssignment_3() { return cIndirectReferenceAssignment_3; }

		//IndirectReference
		public RuleCall getIndirectReferenceIndirectReferenceEnumRuleCall_3_0() { return cIndirectReferenceIndirectReferenceEnumRuleCall_3_0; }

		//type=AbstractEntryValue
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }

		//AbstractEntryValue
		public RuleCall getTypeAbstractEntryValueParserRuleCall_4_0() { return cTypeAbstractEntryValueParserRuleCall_4_0; }

		//requiresCustomValidation?="custom-validation"?
		public Assignment getRequiresCustomValidationAssignment_5() { return cRequiresCustomValidationAssignment_5; }

		//"custom-validation"
		public Keyword getRequiresCustomValidationCustomValidationKeyword_5_0() { return cRequiresCustomValidationCustomValidationKeyword_5_0; }

		//requiresCustomDefault?="custom-default"?
		public Assignment getRequiresCustomDefaultAssignment_6() { return cRequiresCustomDefaultAssignment_6; }

		//"custom-default"
		public Keyword getRequiresCustomDefaultCustomDefaultKeyword_6_0() { return cRequiresCustomDefaultCustomDefaultKeyword_6_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_7() { return cGreaterThanSignKeyword_7; }
	}

	public class ArrayValidationRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArrayValidationRule");
		private final RuleCall cArrayLengthValidationRuleParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ArrayValidationRule:
		//	ArrayLengthValidationRule;
		public ParserRule getRule() { return rule; }

		//ArrayLengthValidationRule
		public RuleCall getArrayLengthValidationRuleParserRuleCall() { return cArrayLengthValidationRuleParserRuleCall; }
	}

	public class ArrayLengthValidationRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArrayLengthValidationRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLengthKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLengthAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLengthINTTerminalRuleCall_1_0 = (RuleCall)cLengthAssignment_1.eContents().get(0);
		
		//ArrayLengthValidationRule:
		//	"length" length=INT;
		public ParserRule getRule() { return rule; }

		//"length" length=INT
		public Group getGroup() { return cGroup; }

		//"length"
		public Keyword getLengthKeyword_0() { return cLengthKeyword_0; }

		//length=INT
		public Assignment getLengthAssignment_1() { return cLengthAssignment_1; }

		//INT
		public RuleCall getLengthINTTerminalRuleCall_1_0() { return cLengthINTTerminalRuleCall_1_0; }
	}

	public class ObjectEntryValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ObjectEntryValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cObjectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cObjectEntryValueAction_1 = (Action)cGroup.eContents().get(1);
		
		//ObjectEntryValue:
		//	"object" {ObjectEntryValue};
		public ParserRule getRule() { return rule; }

		//"object" {ObjectEntryValue}
		public Group getGroup() { return cGroup; }

		//"object"
		public Keyword getObjectKeyword_0() { return cObjectKeyword_0; }

		//{ObjectEntryValue}
		public Action getObjectEntryValueAction_1() { return cObjectEntryValueAction_1; }
	}

	public class MappingDictEntryValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MappingDictEntryValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMappingDictKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeAbstractEntryValueParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cRequiresCustomValidationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cRequiresCustomValidationCustomValidationKeyword_3_0 = (Keyword)cRequiresCustomValidationAssignment_3.eContents().get(0);
		private final Assignment cRequiresCustomDefaultAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cRequiresCustomDefaultCustomDefaultKeyword_4_0 = (Keyword)cRequiresCustomDefaultAssignment_4.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//MappingDictEntryValue:
		//	"mapping-dict" "<" type=AbstractEntryValue requiresCustomValidation?="custom-validation"?
		//	requiresCustomDefault?="custom-default"? ">";
		public ParserRule getRule() { return rule; }

		//"mapping-dict" "<" type=AbstractEntryValue requiresCustomValidation?="custom-validation"?
		//requiresCustomDefault?="custom-default"? ">"
		public Group getGroup() { return cGroup; }

		//"mapping-dict"
		public Keyword getMappingDictKeyword_0() { return cMappingDictKeyword_0; }

		//"<"
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }

		//type=AbstractEntryValue
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//AbstractEntryValue
		public RuleCall getTypeAbstractEntryValueParserRuleCall_2_0() { return cTypeAbstractEntryValueParserRuleCall_2_0; }

		//requiresCustomValidation?="custom-validation"?
		public Assignment getRequiresCustomValidationAssignment_3() { return cRequiresCustomValidationAssignment_3; }

		//"custom-validation"
		public Keyword getRequiresCustomValidationCustomValidationKeyword_3_0() { return cRequiresCustomValidationCustomValidationKeyword_3_0; }

		//requiresCustomDefault?="custom-default"?
		public Assignment getRequiresCustomDefaultAssignment_4() { return cRequiresCustomDefaultAssignment_4; }

		//"custom-default"
		public Keyword getRequiresCustomDefaultCustomDefaultKeyword_4_0() { return cRequiresCustomDefaultCustomDefaultKeyword_4_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_5() { return cGreaterThanSignKeyword_5; }
	}

	public class StringEntryValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringEntryValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cTextStringAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cTextStringTextStringKeyword_0_0_0 = (Keyword)cTextStringAssignment_0_0.eContents().get(0);
		private final Assignment cAsciiStringAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cAsciiStringAsciiStringKeyword_0_1_0 = (Keyword)cAsciiStringAssignment_0_1.eContents().get(0);
		private final Assignment cByteStringAssignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final Keyword cByteStringByteStringKeyword_0_2_0 = (Keyword)cByteStringAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRuleAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRuleStringValidationRuleParserRuleCall_1_1_0 = (RuleCall)cRuleAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//StringEntryValue:
		//	(textString?="text-string" | asciiString?="ascii-string" | byteString?="byte-string") ("[" rule=StringValidationRule
		//	"]")?;
		public ParserRule getRule() { return rule; }

		//(textString?="text-string" | asciiString?="ascii-string" | byteString?="byte-string") ("[" rule=StringValidationRule
		//"]")?
		public Group getGroup() { return cGroup; }

		//textString?="text-string" | asciiString?="ascii-string" | byteString?="byte-string"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//textString?="text-string"
		public Assignment getTextStringAssignment_0_0() { return cTextStringAssignment_0_0; }

		//"text-string"
		public Keyword getTextStringTextStringKeyword_0_0_0() { return cTextStringTextStringKeyword_0_0_0; }

		//asciiString?="ascii-string"
		public Assignment getAsciiStringAssignment_0_1() { return cAsciiStringAssignment_0_1; }

		//"ascii-string"
		public Keyword getAsciiStringAsciiStringKeyword_0_1_0() { return cAsciiStringAsciiStringKeyword_0_1_0; }

		//byteString?="byte-string"
		public Assignment getByteStringAssignment_0_2() { return cByteStringAssignment_0_2; }

		//"byte-string"
		public Keyword getByteStringByteStringKeyword_0_2_0() { return cByteStringByteStringKeyword_0_2_0; }

		//("[" rule=StringValidationRule "]")?
		public Group getGroup_1() { return cGroup_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//rule=StringValidationRule
		public Assignment getRuleAssignment_1_1() { return cRuleAssignment_1_1; }

		//StringValidationRule
		public RuleCall getRuleStringValidationRuleParserRuleCall_1_1_0() { return cRuleStringValidationRuleParserRuleCall_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
	}

	public class StringValidationRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringValidationRule");
		private final RuleCall cStringLengthValidationRuleParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//StringValidationRule:
		//	StringLengthValidationRule;
		public ParserRule getRule() { return rule; }

		//StringLengthValidationRule
		public RuleCall getStringLengthValidationRuleParserRuleCall() { return cStringLengthValidationRuleParserRuleCall; }
	}

	public class StringLengthValidationRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringLengthValidationRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLengthKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLengthAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLengthIntLiteralParserRuleCall_1_0 = (RuleCall)cLengthAssignment_1.eContents().get(0);
		
		//StringLengthValidationRule:
		//	"length" length=IntLiteral;
		public ParserRule getRule() { return rule; }

		//"length" length=IntLiteral
		public Group getGroup() { return cGroup; }

		//"length"
		public Keyword getLengthKeyword_0() { return cLengthKeyword_0; }

		//length=IntLiteral
		public Assignment getLengthAssignment_1() { return cLengthAssignment_1; }

		//IntLiteral
		public RuleCall getLengthIntLiteralParserRuleCall_1_0() { return cLengthIntLiteralParserRuleCall_1_0; }
	}

	public class AlternativeEntryValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AlternativeEntryValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOptionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOptionsAbstractEntryValueParserRuleCall_1_0 = (RuleCall)cOptionsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cVerticalLineKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOptionsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOptionsAbstractEntryValueParserRuleCall_2_1_0 = (RuleCall)cOptionsAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AlternativeEntryValue:
		//	"(" options+=AbstractEntryValue ("|" options+=AbstractEntryValue)+ ")";
		public ParserRule getRule() { return rule; }

		//"(" options+=AbstractEntryValue ("|" options+=AbstractEntryValue)+ ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//options+=AbstractEntryValue
		public Assignment getOptionsAssignment_1() { return cOptionsAssignment_1; }

		//AbstractEntryValue
		public RuleCall getOptionsAbstractEntryValueParserRuleCall_1_0() { return cOptionsAbstractEntryValueParserRuleCall_1_0; }

		//("|" options+=AbstractEntryValue)+
		public Group getGroup_2() { return cGroup_2; }

		//"|"
		public Keyword getVerticalLineKeyword_2_0() { return cVerticalLineKeyword_2_0; }

		//options+=AbstractEntryValue
		public Assignment getOptionsAssignment_2_1() { return cOptionsAssignment_2_1; }

		//AbstractEntryValue
		public RuleCall getOptionsAbstractEntryValueParserRuleCall_2_1_0() { return cOptionsAbstractEntryValueParserRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class BooleanEntryValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanEntryValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBoolKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cBooleanEntryValueAction_1 = (Action)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cHasMustBeAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final Keyword cHasMustBeMustBeKeyword_2_0_0_0 = (Keyword)cHasMustBeAssignment_2_0_0.eContents().get(0);
		private final Assignment cRequiredValueAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cRequiredValueBoolEnumRuleCall_2_0_1_0 = (RuleCall)cRequiredValueAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cHasDefaultAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final Keyword cHasDefaultDefaultKeyword_2_1_0_0 = (Keyword)cHasDefaultAssignment_2_1_0.eContents().get(0);
		private final Assignment cDefaultValueAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cDefaultValueBoolEnumRuleCall_2_1_1_0 = (RuleCall)cDefaultValueAssignment_2_1_1.eContents().get(0);
		
		//BooleanEntryValue:
		//	"bool" {BooleanEntryValue} (hasMustBe?="must-be" requiredValue=Bool | hasDefault?="default" defaultValue=Bool)?;
		public ParserRule getRule() { return rule; }

		//"bool" {BooleanEntryValue} (hasMustBe?="must-be" requiredValue=Bool | hasDefault?="default" defaultValue=Bool)?
		public Group getGroup() { return cGroup; }

		//"bool"
		public Keyword getBoolKeyword_0() { return cBoolKeyword_0; }

		//{BooleanEntryValue}
		public Action getBooleanEntryValueAction_1() { return cBooleanEntryValueAction_1; }

		//(hasMustBe?="must-be" requiredValue=Bool | hasDefault?="default" defaultValue=Bool)?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//hasMustBe?="must-be" requiredValue=Bool
		public Group getGroup_2_0() { return cGroup_2_0; }

		//hasMustBe?="must-be"
		public Assignment getHasMustBeAssignment_2_0_0() { return cHasMustBeAssignment_2_0_0; }

		//"must-be"
		public Keyword getHasMustBeMustBeKeyword_2_0_0_0() { return cHasMustBeMustBeKeyword_2_0_0_0; }

		//requiredValue=Bool
		public Assignment getRequiredValueAssignment_2_0_1() { return cRequiredValueAssignment_2_0_1; }

		//Bool
		public RuleCall getRequiredValueBoolEnumRuleCall_2_0_1_0() { return cRequiredValueBoolEnumRuleCall_2_0_1_0; }

		//hasDefault?="default" defaultValue=Bool
		public Group getGroup_2_1() { return cGroup_2_1; }

		//hasDefault?="default"
		public Assignment getHasDefaultAssignment_2_1_0() { return cHasDefaultAssignment_2_1_0; }

		//"default"
		public Keyword getHasDefaultDefaultKeyword_2_1_0_0() { return cHasDefaultDefaultKeyword_2_1_0_0; }

		//defaultValue=Bool
		public Assignment getDefaultValueAssignment_2_1_1() { return cDefaultValueAssignment_2_1_1; }

		//Bool
		public RuleCall getDefaultValueBoolEnumRuleCall_2_1_1_0() { return cDefaultValueBoolEnumRuleCall_2_1_1_0; }
	}

	public class ReferenceEntryValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReferenceEntryValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cReferenceEntryValueAction_1 = (Action)cGroup.eContents().get(1);
		
		//ReferenceEntryValue:
		//	"ref" {ReferenceEntryValue};
		public ParserRule getRule() { return rule; }

		//"ref" {ReferenceEntryValue}
		public Group getGroup() { return cGroup; }

		//"ref"
		public Keyword getRefKeyword_0() { return cRefKeyword_0; }

		//{ReferenceEntryValue}
		public Action getReferenceEntryValueAction_1() { return cReferenceEntryValueAction_1; }
	}

	public class ParentReferenceEntryValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParentReferenceEntryValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParentRefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cParentTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cParentTypeDictionaryDeclarationCrossReference_1_0 = (CrossReference)cParentTypeAssignment_1.eContents().get(0);
		private final RuleCall cParentTypeDictionaryDeclarationQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cParentTypeDictionaryDeclarationCrossReference_1_0.eContents().get(1);
		
		//ParentReferenceEntryValue:
		//	"parent-ref" parentType=[DictionaryDeclaration|QualifiedName];
		public ParserRule getRule() { return rule; }

		//"parent-ref" parentType=[DictionaryDeclaration|QualifiedName]
		public Group getGroup() { return cGroup; }

		//"parent-ref"
		public Keyword getParentRefKeyword_0() { return cParentRefKeyword_0; }

		//parentType=[DictionaryDeclaration|QualifiedName]
		public Assignment getParentTypeAssignment_1() { return cParentTypeAssignment_1; }

		//[DictionaryDeclaration|QualifiedName]
		public CrossReference getParentTypeDictionaryDeclarationCrossReference_1_0() { return cParentTypeDictionaryDeclarationCrossReference_1_0; }

		//QualifiedName
		public RuleCall getParentTypeDictionaryDeclarationQualifiedNameParserRuleCall_1_0_1() { return cParentTypeDictionaryDeclarationQualifiedNameParserRuleCall_1_0_1; }
	}

	public class DictionaryObjectEntryValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DictionaryObjectEntryValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDictionaryObjectEntryValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDictKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		/// **
		// * This is a rule that representat a simple dictionary with no spcific type.
		// * / DictionaryObjectEntryValue:
		//	{DictionaryObjectEntryValue} "dict";
		public ParserRule getRule() { return rule; }

		//{DictionaryObjectEntryValue} "dict"
		public Group getGroup() { return cGroup; }

		//{DictionaryObjectEntryValue}
		public Action getDictionaryObjectEntryValueAction_0() { return cDictionaryObjectEntryValueAction_0; }

		//"dict"
		public Keyword getDictKeyword_1() { return cDictKeyword_1; }
	}

	public class DictionaryDeclarationEntryValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DictionaryDeclarationEntryValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDictObjKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTargetDictionaryDeclarationCrossReference_1_0 = (CrossReference)cTargetAssignment_1.eContents().get(0);
		private final RuleCall cTargetDictionaryDeclarationQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cTargetDictionaryDeclarationCrossReference_1_0.eContents().get(1);
		
		/// **
		// * Reference to a high level dictionary object 
		// * / DictionaryDeclarationEntryValue:
		//	"dict-obj" target=[DictionaryDeclaration|QualifiedName];
		public ParserRule getRule() { return rule; }

		//"dict-obj" target=[DictionaryDeclaration|QualifiedName]
		public Group getGroup() { return cGroup; }

		//"dict-obj"
		public Keyword getDictObjKeyword_0() { return cDictObjKeyword_0; }

		//target=[DictionaryDeclaration|QualifiedName]
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }

		//[DictionaryDeclaration|QualifiedName]
		public CrossReference getTargetDictionaryDeclarationCrossReference_1_0() { return cTargetDictionaryDeclarationCrossReference_1_0; }

		//QualifiedName
		public RuleCall getTargetDictionaryDeclarationQualifiedNameParserRuleCall_1_0_1() { return cTargetDictionaryDeclarationQualifiedNameParserRuleCall_1_0_1; }
	}

	public class ArrayMappedEntryValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArrayMappedEntryValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArrayMappedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTargetArrayMappedDeclarationCrossReference_1_0 = (CrossReference)cTargetAssignment_1.eContents().get(0);
		private final RuleCall cTargetArrayMappedDeclarationQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cTargetArrayMappedDeclarationCrossReference_1_0.eContents().get(1);
		
		//ArrayMappedEntryValue:
		//	"array-mapped" target=[ArrayMappedDeclaration|QualifiedName];
		public ParserRule getRule() { return rule; }

		//"array-mapped" target=[ArrayMappedDeclaration|QualifiedName]
		public Group getGroup() { return cGroup; }

		//"array-mapped"
		public Keyword getArrayMappedKeyword_0() { return cArrayMappedKeyword_0; }

		//target=[ArrayMappedDeclaration|QualifiedName]
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }

		//[ArrayMappedDeclaration|QualifiedName]
		public CrossReference getTargetArrayMappedDeclarationCrossReference_1_0() { return cTargetArrayMappedDeclarationCrossReference_1_0; }

		//QualifiedName
		public RuleCall getTargetArrayMappedDeclarationQualifiedNameParserRuleCall_1_0_1() { return cTargetArrayMappedDeclarationQualifiedNameParserRuleCall_1_0_1; }
	}

	public class BitFlagsEntryValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BitFlagsEntryValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBitFlagsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTargetBitFlagsDeclarationCrossReference_1_0 = (CrossReference)cTargetAssignment_1.eContents().get(0);
		private final RuleCall cTargetBitFlagsDeclarationQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cTargetBitFlagsDeclarationCrossReference_1_0.eContents().get(1);
		
		//BitFlagsEntryValue:
		//	"bit-flags" target=[BitFlagsDeclaration|QualifiedName];
		public ParserRule getRule() { return rule; }

		//"bit-flags" target=[BitFlagsDeclaration|QualifiedName]
		public Group getGroup() { return cGroup; }

		//"bit-flags"
		public Keyword getBitFlagsKeyword_0() { return cBitFlagsKeyword_0; }

		//target=[BitFlagsDeclaration|QualifiedName]
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }

		//[BitFlagsDeclaration|QualifiedName]
		public CrossReference getTargetBitFlagsDeclarationCrossReference_1_0() { return cTargetBitFlagsDeclarationCrossReference_1_0; }

		//QualifiedName
		public RuleCall getTargetBitFlagsDeclarationQualifiedNameParserRuleCall_1_0_1() { return cTargetBitFlagsDeclarationQualifiedNameParserRuleCall_1_0_1; }
	}

	public class DateEntryValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DateEntryValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDateEntryValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//DateEntryValue:
		//	{DateEntryValue} "date";
		public ParserRule getRule() { return rule; }

		//{DateEntryValue} "date"
		public Group getGroup() { return cGroup; }

		//{DateEntryValue}
		public Action getDateEntryValueAction_0() { return cDateEntryValueAction_0; }

		//"date"
		public Keyword getDateKeyword_1() { return cDateKeyword_1; }
	}

	public class NameEnumEntryValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NameEnumEntryValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNameEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTargetNameEnumDeclarationCrossReference_1_0 = (CrossReference)cTargetAssignment_1.eContents().get(0);
		private final RuleCall cTargetNameEnumDeclarationQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cTargetNameEnumDeclarationCrossReference_1_0.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cHasMustBeAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final Keyword cHasMustBeMustBeKeyword_2_0_0_0 = (Keyword)cHasMustBeAssignment_2_0_0.eContents().get(0);
		private final Assignment cRequiredValueAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cRequiredValueNAME_OBJECTTerminalRuleCall_2_0_1_0 = (RuleCall)cRequiredValueAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cHasDefaultAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final Keyword cHasDefaultDefaultKeyword_2_1_0_0 = (Keyword)cHasDefaultAssignment_2_1_0.eContents().get(0);
		private final Assignment cDefaultValueAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cDefaultValueNAME_OBJECTTerminalRuleCall_2_1_1_0 = (RuleCall)cDefaultValueAssignment_2_1_1.eContents().get(0);
		
		//NameEnumEntryValue:
		//	"name-enum" target=[NameEnumDeclaration|QualifiedName] (hasMustBe?="must-be" requiredValue=NAME_OBJECT |
		//	hasDefault?="default" defaultValue=NAME_OBJECT)?;
		public ParserRule getRule() { return rule; }

		//"name-enum" target=[NameEnumDeclaration|QualifiedName] (hasMustBe?="must-be" requiredValue=NAME_OBJECT |
		//hasDefault?="default" defaultValue=NAME_OBJECT)?
		public Group getGroup() { return cGroup; }

		//"name-enum"
		public Keyword getNameEnumKeyword_0() { return cNameEnumKeyword_0; }

		//target=[NameEnumDeclaration|QualifiedName]
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }

		//[NameEnumDeclaration|QualifiedName]
		public CrossReference getTargetNameEnumDeclarationCrossReference_1_0() { return cTargetNameEnumDeclarationCrossReference_1_0; }

		//QualifiedName
		public RuleCall getTargetNameEnumDeclarationQualifiedNameParserRuleCall_1_0_1() { return cTargetNameEnumDeclarationQualifiedNameParserRuleCall_1_0_1; }

		//(hasMustBe?="must-be" requiredValue=NAME_OBJECT | hasDefault?="default" defaultValue=NAME_OBJECT)?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//hasMustBe?="must-be" requiredValue=NAME_OBJECT
		public Group getGroup_2_0() { return cGroup_2_0; }

		//hasMustBe?="must-be"
		public Assignment getHasMustBeAssignment_2_0_0() { return cHasMustBeAssignment_2_0_0; }

		//"must-be"
		public Keyword getHasMustBeMustBeKeyword_2_0_0_0() { return cHasMustBeMustBeKeyword_2_0_0_0; }

		//requiredValue=NAME_OBJECT
		public Assignment getRequiredValueAssignment_2_0_1() { return cRequiredValueAssignment_2_0_1; }

		//NAME_OBJECT
		public RuleCall getRequiredValueNAME_OBJECTTerminalRuleCall_2_0_1_0() { return cRequiredValueNAME_OBJECTTerminalRuleCall_2_0_1_0; }

		//hasDefault?="default" defaultValue=NAME_OBJECT
		public Group getGroup_2_1() { return cGroup_2_1; }

		//hasDefault?="default"
		public Assignment getHasDefaultAssignment_2_1_0() { return cHasDefaultAssignment_2_1_0; }

		//"default"
		public Keyword getHasDefaultDefaultKeyword_2_1_0_0() { return cHasDefaultDefaultKeyword_2_1_0_0; }

		//defaultValue=NAME_OBJECT
		public Assignment getDefaultValueAssignment_2_1_1() { return cDefaultValueAssignment_2_1_1; }

		//NAME_OBJECT
		public RuleCall getDefaultValueNAME_OBJECTTerminalRuleCall_2_1_1_0() { return cDefaultValueNAME_OBJECTTerminalRuleCall_2_1_1_0; }
	}

	public class NumberLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumberLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRealLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NumberLiteral:
		//	IntLiteral | RealLiteral;
		public ParserRule getRule() { return rule; }

		//IntLiteral | RealLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntLiteral
		public RuleCall getIntLiteralParserRuleCall_0() { return cIntLiteralParserRuleCall_0; }

		//RealLiteral
		public RuleCall getRealLiteralParserRuleCall_1() { return cRealLiteralParserRuleCall_1; }
	}

	public class IntLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//IntLiteral:
		//	value=INT;
		public ParserRule getRule() { return rule; }

		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}

	public class RealLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RealLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueDOUBLETerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//RealLiteral:
		//	value=DOUBLE;
		public ParserRule getRule() { return rule; }

		//value=DOUBLE
		public Assignment getValueAssignment() { return cValueAssignment; }

		//DOUBLE
		public RuleCall getValueDOUBLETerminalRuleCall_0() { return cValueDOUBLETerminalRuleCall_0; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cValidIDParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cValidIDParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ValidID ("." ValidID)*;
		public ParserRule getRule() { return rule; }

		//ValidID ("." ValidID)*
		public Group getGroup() { return cGroup; }

		//ValidID
		public RuleCall getValidIDParserRuleCall_0() { return cValidIDParserRuleCall_0; }

		//("." ValidID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ValidID
		public RuleCall getValidIDParserRuleCall_1_1() { return cValidIDParserRuleCall_1_1; }
	}

	public class ValidIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValidID");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ValidID:
		//	ID;
		public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}
	
	
	public class IndirectReferenceElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "IndirectReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cUNDEFINEDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cUNDEFINEDUNDEFINEDKeyword_0_0 = (Keyword)cUNDEFINEDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cINDIRECT_SHALLEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cINDIRECT_SHALLIndirectShallKeyword_1_0 = (Keyword)cINDIRECT_SHALLEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cINDIRECT_SHALL_NOTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cINDIRECT_SHALL_NOTIndirectShallNotKeyword_2_0 = (Keyword)cINDIRECT_SHALL_NOTEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cINDIRECT_SHOULDEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cINDIRECT_SHOULDIndirectShouldKeyword_3_0 = (Keyword)cINDIRECT_SHOULDEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum IndirectReference:
		//	UNDEFINED | INDIRECT_SHALL="indirect-shall" | INDIRECT_SHALL_NOT="indirect-shall-not" |
		//	INDIRECT_SHOULD="indirect-should";
		public EnumRule getRule() { return rule; }

		//UNDEFINED | INDIRECT_SHALL="indirect-shall" | INDIRECT_SHALL_NOT="indirect-shall-not" |
		//INDIRECT_SHOULD="indirect-should"
		public Alternatives getAlternatives() { return cAlternatives; }

		//UNDEFINED
		public EnumLiteralDeclaration getUNDEFINEDEnumLiteralDeclaration_0() { return cUNDEFINEDEnumLiteralDeclaration_0; }

		//"UNDEFINED"
		public Keyword getUNDEFINEDUNDEFINEDKeyword_0_0() { return cUNDEFINEDUNDEFINEDKeyword_0_0; }

		//INDIRECT_SHALL="indirect-shall"
		public EnumLiteralDeclaration getINDIRECT_SHALLEnumLiteralDeclaration_1() { return cINDIRECT_SHALLEnumLiteralDeclaration_1; }

		//"indirect-shall"
		public Keyword getINDIRECT_SHALLIndirectShallKeyword_1_0() { return cINDIRECT_SHALLIndirectShallKeyword_1_0; }

		//INDIRECT_SHALL_NOT="indirect-shall-not"
		public EnumLiteralDeclaration getINDIRECT_SHALL_NOTEnumLiteralDeclaration_2() { return cINDIRECT_SHALL_NOTEnumLiteralDeclaration_2; }

		//"indirect-shall-not"
		public Keyword getINDIRECT_SHALL_NOTIndirectShallNotKeyword_2_0() { return cINDIRECT_SHALL_NOTIndirectShallNotKeyword_2_0; }

		//INDIRECT_SHOULD="indirect-should"
		public EnumLiteralDeclaration getINDIRECT_SHOULDEnumLiteralDeclaration_3() { return cINDIRECT_SHOULDEnumLiteralDeclaration_3; }

		//"indirect-should"
		public Keyword getINDIRECT_SHOULDIndirectShouldKeyword_3_0() { return cINDIRECT_SHOULDIndirectShouldKeyword_3_0; }
	}

	public class SinceVersionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "SinceVersion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cUNDEFINEDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cUNDEFINEDUNDEFINEDKeyword_0_0 = (Keyword)cUNDEFINEDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPDF_10EnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPDF_10Pdf10Keyword_1_0 = (Keyword)cPDF_10EnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPDF_11EnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPDF_11Pdf11Keyword_2_0 = (Keyword)cPDF_11EnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cPDF_12EnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cPDF_12Pdf12Keyword_3_0 = (Keyword)cPDF_12EnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cPDF_13EnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cPDF_13Pdf13Keyword_4_0 = (Keyword)cPDF_13EnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cPDF_14EnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cPDF_14Pdf14Keyword_5_0 = (Keyword)cPDF_14EnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cPDF_15EnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cPDF_15Pdf15Keyword_6_0 = (Keyword)cPDF_15EnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cPDF_16EnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cPDF_16Pdf16Keyword_7_0 = (Keyword)cPDF_16EnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cPDF_17EnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cPDF_17Pdf17Keyword_8_0 = (Keyword)cPDF_17EnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cPDF_32000_1EnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cPDF_32000_1320001Keyword_9_0 = (Keyword)cPDF_32000_1EnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cPDF_20EnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cPDF_20Pdf20Keyword_10_0 = (Keyword)cPDF_20EnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cPDF_32000_2EnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cPDF_32000_2320002Keyword_11_0 = (Keyword)cPDF_32000_2EnumLiteralDeclaration_11.eContents().get(0);
		
		//enum SinceVersion:
		//	UNDEFINED | PDF_10="pdf-1.0" | PDF_11="pdf-1.1" | PDF_12="pdf-1.2" | PDF_13="pdf-1.3" | PDF_14="pdf-1.4" |
		//	PDF_15="pdf-1.5" | PDF_16="pdf-1.6" | PDF_17="pdf-1.7" | PDF_32000_1="32000-1" | PDF_20="pdf-2.0" |
		//	PDF_32000_2="32000-2";
		public EnumRule getRule() { return rule; }

		//UNDEFINED | PDF_10="pdf-1.0" | PDF_11="pdf-1.1" | PDF_12="pdf-1.2" | PDF_13="pdf-1.3" | PDF_14="pdf-1.4" |
		//PDF_15="pdf-1.5" | PDF_16="pdf-1.6" | PDF_17="pdf-1.7" | PDF_32000_1="32000-1" | PDF_20="pdf-2.0" |
		//PDF_32000_2="32000-2"
		public Alternatives getAlternatives() { return cAlternatives; }

		//UNDEFINED
		public EnumLiteralDeclaration getUNDEFINEDEnumLiteralDeclaration_0() { return cUNDEFINEDEnumLiteralDeclaration_0; }

		//"UNDEFINED"
		public Keyword getUNDEFINEDUNDEFINEDKeyword_0_0() { return cUNDEFINEDUNDEFINEDKeyword_0_0; }

		//PDF_10="pdf-1.0"
		public EnumLiteralDeclaration getPDF_10EnumLiteralDeclaration_1() { return cPDF_10EnumLiteralDeclaration_1; }

		//"pdf-1.0"
		public Keyword getPDF_10Pdf10Keyword_1_0() { return cPDF_10Pdf10Keyword_1_0; }

		//PDF_11="pdf-1.1"
		public EnumLiteralDeclaration getPDF_11EnumLiteralDeclaration_2() { return cPDF_11EnumLiteralDeclaration_2; }

		//"pdf-1.1"
		public Keyword getPDF_11Pdf11Keyword_2_0() { return cPDF_11Pdf11Keyword_2_0; }

		//PDF_12="pdf-1.2"
		public EnumLiteralDeclaration getPDF_12EnumLiteralDeclaration_3() { return cPDF_12EnumLiteralDeclaration_3; }

		//"pdf-1.2"
		public Keyword getPDF_12Pdf12Keyword_3_0() { return cPDF_12Pdf12Keyword_3_0; }

		//PDF_13="pdf-1.3"
		public EnumLiteralDeclaration getPDF_13EnumLiteralDeclaration_4() { return cPDF_13EnumLiteralDeclaration_4; }

		//"pdf-1.3"
		public Keyword getPDF_13Pdf13Keyword_4_0() { return cPDF_13Pdf13Keyword_4_0; }

		//PDF_14="pdf-1.4"
		public EnumLiteralDeclaration getPDF_14EnumLiteralDeclaration_5() { return cPDF_14EnumLiteralDeclaration_5; }

		//"pdf-1.4"
		public Keyword getPDF_14Pdf14Keyword_5_0() { return cPDF_14Pdf14Keyword_5_0; }

		//PDF_15="pdf-1.5"
		public EnumLiteralDeclaration getPDF_15EnumLiteralDeclaration_6() { return cPDF_15EnumLiteralDeclaration_6; }

		//"pdf-1.5"
		public Keyword getPDF_15Pdf15Keyword_6_0() { return cPDF_15Pdf15Keyword_6_0; }

		//PDF_16="pdf-1.6"
		public EnumLiteralDeclaration getPDF_16EnumLiteralDeclaration_7() { return cPDF_16EnumLiteralDeclaration_7; }

		//"pdf-1.6"
		public Keyword getPDF_16Pdf16Keyword_7_0() { return cPDF_16Pdf16Keyword_7_0; }

		//PDF_17="pdf-1.7"
		public EnumLiteralDeclaration getPDF_17EnumLiteralDeclaration_8() { return cPDF_17EnumLiteralDeclaration_8; }

		//"pdf-1.7"
		public Keyword getPDF_17Pdf17Keyword_8_0() { return cPDF_17Pdf17Keyword_8_0; }

		//PDF_32000_1="32000-1"
		public EnumLiteralDeclaration getPDF_32000_1EnumLiteralDeclaration_9() { return cPDF_32000_1EnumLiteralDeclaration_9; }

		//"32000-1"
		public Keyword getPDF_32000_1320001Keyword_9_0() { return cPDF_32000_1320001Keyword_9_0; }

		//PDF_20="pdf-2.0"
		public EnumLiteralDeclaration getPDF_20EnumLiteralDeclaration_10() { return cPDF_20EnumLiteralDeclaration_10; }

		//"pdf-2.0"
		public Keyword getPDF_20Pdf20Keyword_10_0() { return cPDF_20Pdf20Keyword_10_0; }

		//PDF_32000_2="32000-2"
		public EnumLiteralDeclaration getPDF_32000_2EnumLiteralDeclaration_11() { return cPDF_32000_2EnumLiteralDeclaration_11; }

		//"32000-2"
		public Keyword getPDF_32000_2320002Keyword_11_0() { return cPDF_32000_2320002Keyword_11_0; }
	}

	public class BoolElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Bool");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTRUEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTRUETrueKeyword_0_0 = (Keyword)cTRUEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFALSEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFALSEFalseKeyword_1_0 = (Keyword)cFALSEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Bool:
		//	TRUE="true" | FALSE="false";
		public EnumRule getRule() { return rule; }

		//TRUE="true" | FALSE="false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//TRUE="true"
		public EnumLiteralDeclaration getTRUEEnumLiteralDeclaration_0() { return cTRUEEnumLiteralDeclaration_0; }

		//"true"
		public Keyword getTRUETrueKeyword_0_0() { return cTRUETrueKeyword_0_0; }

		//FALSE="false"
		public EnumLiteralDeclaration getFALSEEnumLiteralDeclaration_1() { return cFALSEEnumLiteralDeclaration_1; }

		//"false"
		public Keyword getFALSEFalseKeyword_1_0() { return cFALSEFalseKeyword_1_0; }
	}
	
	private PDFModelElements pPDFModel;
	private AbstractDeclarationElements pAbstractDeclaration;
	private SpecificationReferenceElements pSpecificationReference;
	private SectionReferenceElements pSectionReference;
	private ArrayMappedDeclarationElements pArrayMappedDeclaration;
	private AbstractEntryElements pAbstractEntry;
	private ArrayMappedEntryElements pArrayMappedEntry;
	private DictionaryDeclarationElements pDictionaryDeclaration;
	private SubtypeConfigElements pSubtypeConfig;
	private DictionaryEntryElements pDictionaryEntry;
	private PackageDeclarationElements pPackageDeclaration;
	private BitFlagsDeclarationElements pBitFlagsDeclaration;
	private BitFlagsDeclarationPartElements pBitFlagsDeclarationPart;
	private NameEnumDeclarationElements pNameEnumDeclaration;
	private NameEnumDeclarationPartElements pNameEnumDeclarationPart;
	private AbstractEntryValueElements pAbstractEntryValue;
	private NullObjectEntryValueElements pNullObjectEntryValue;
	private NameObjectEntryValueElements pNameObjectEntryValue;
	private NumberObjectEntryValueElements pNumberObjectEntryValue;
	private NumberValidationRuleElements pNumberValidationRule;
	private NumberInclusiveRangeValidationRuleElements pNumberInclusiveRangeValidationRule;
	private NumberGreaterValidationRuleElements pNumberGreaterValidationRule;
	private NumberGreaterEqualsValidationRuleElements pNumberGreaterEqualsValidationRule;
	private NumberValuesValidationRuleElements pNumberValuesValidationRule;
	private NumberValuesValidationRuleEntryElements pNumberValuesValidationRuleEntry;
	private IntegerObjectEntryValueElements pIntegerObjectEntryValue;
	private IntegerValidationRuleElements pIntegerValidationRule;
	private IntegerInclusiveRangeValidationRuleElements pIntegerInclusiveRangeValidationRule;
	private IntegerValuesValidationRuleElements pIntegerValuesValidationRule;
	private IntegerGreaterValidationRuleElements pIntegerGreaterValidationRule;
	private IntegerGreaterEqualsValidationRuleElements pIntegerGreaterEqualsValidationRule;
	private IntegerValuesValidationRuleEntryElements pIntegerValuesValidationRuleEntry;
	private RealObjectEntryValueElements pRealObjectEntryValue;
	private NameTreeEntryValueElements pNameTreeEntryValue;
	private NumberTreeEntryValueElements pNumberTreeEntryValue;
	private ArrayEntryValueElements pArrayEntryValue;
	private ArrayValidationRuleElements pArrayValidationRule;
	private ArrayLengthValidationRuleElements pArrayLengthValidationRule;
	private ObjectEntryValueElements pObjectEntryValue;
	private MappingDictEntryValueElements pMappingDictEntryValue;
	private StringEntryValueElements pStringEntryValue;
	private StringValidationRuleElements pStringValidationRule;
	private StringLengthValidationRuleElements pStringLengthValidationRule;
	private AlternativeEntryValueElements pAlternativeEntryValue;
	private BooleanEntryValueElements pBooleanEntryValue;
	private ReferenceEntryValueElements pReferenceEntryValue;
	private ParentReferenceEntryValueElements pParentReferenceEntryValue;
	private DictionaryObjectEntryValueElements pDictionaryObjectEntryValue;
	private DictionaryDeclarationEntryValueElements pDictionaryDeclarationEntryValue;
	private ArrayMappedEntryValueElements pArrayMappedEntryValue;
	private BitFlagsEntryValueElements pBitFlagsEntryValue;
	private DateEntryValueElements pDateEntryValue;
	private NameEnumEntryValueElements pNameEnumEntryValue;
	private NumberLiteralElements pNumberLiteral;
	private IntLiteralElements pIntLiteral;
	private RealLiteralElements pRealLiteral;
	private IndirectReferenceElements unknownRuleIndirectReference;
	private SinceVersionElements unknownRuleSinceVersion;
	private TerminalRule tNAME_OBJECT;
	private BoolElements unknownRuleBool;
	private TerminalRule tINT;
	private TerminalRule tDOUBLE;
	private QualifiedNameElements pQualifiedName;
	private ValidIDElements pValidID;
	private TerminalRule tID;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public PDFModelGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.levigo.jadice.tools.pdf.modelgen.PDFModel".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//PDFModel:
	//	packages+=PackageDeclaration+;
	public PDFModelElements getPDFModelAccess() {
		return (pPDFModel != null) ? pPDFModel : (pPDFModel = new PDFModelElements());
	}
	
	public ParserRule getPDFModelRule() {
		return getPDFModelAccess().getRule();
	}

	//AbstractDeclaration:
	//	DictionaryDeclaration | NameEnumDeclaration | ArrayMappedDeclaration | BitFlagsDeclaration;
	public AbstractDeclarationElements getAbstractDeclarationAccess() {
		return (pAbstractDeclaration != null) ? pAbstractDeclaration : (pAbstractDeclaration = new AbstractDeclarationElements());
	}
	
	public ParserRule getAbstractDeclarationRule() {
		return getAbstractDeclarationAccess().getRule();
	}

	//SpecificationReference:
	//	"@spec-ref" "ISO32000-1:2008" "," section=SectionReference ("," "table" table=INT)?;
	public SpecificationReferenceElements getSpecificationReferenceAccess() {
		return (pSpecificationReference != null) ? pSpecificationReference : (pSpecificationReference = new SpecificationReferenceElements());
	}
	
	public ParserRule getSpecificationReferenceRule() {
		return getSpecificationReferenceAccess().getRule();
	}

	//SectionReference:
	//	"section" section=STRING;
	public SectionReferenceElements getSectionReferenceAccess() {
		return (pSectionReference != null) ? pSectionReference : (pSectionReference = new SectionReferenceElements());
	}
	
	public ParserRule getSectionReferenceRule() {
		return getSectionReferenceAccess().getRule();
	}

	//ArrayMappedDeclaration:
	//	"array-mapped" name=ValidID ("(" since=SinceVersion ")")? "{" entries+=ArrayMappedEntry+ "}";
	public ArrayMappedDeclarationElements getArrayMappedDeclarationAccess() {
		return (pArrayMappedDeclaration != null) ? pArrayMappedDeclaration : (pArrayMappedDeclaration = new ArrayMappedDeclarationElements());
	}
	
	public ParserRule getArrayMappedDeclarationRule() {
		return getArrayMappedDeclarationAccess().getRule();
	}

	//AbstractEntry:
	//	ArrayMappedEntry | DictionaryEntry;
	public AbstractEntryElements getAbstractEntryAccess() {
		return (pAbstractEntry != null) ? pAbstractEntry : (pAbstractEntry = new AbstractEntryElements());
	}
	
	public ParserRule getAbstractEntryRule() {
		return getAbstractEntryAccess().getRule();
	}

	//ArrayMappedEntry:
	//	index=INT "->" name=ValidID cached?="cached"? required?="required"? nullable?="nullable"?
	//	indirectReference=IndirectReference? value=AbstractEntryValue ("(" since=SinceVersion ")")?
	//	requiresCustomValidation?="custom-validation"? requiresCustomDefault?="custom-default"? ";";
	public ArrayMappedEntryElements getArrayMappedEntryAccess() {
		return (pArrayMappedEntry != null) ? pArrayMappedEntry : (pArrayMappedEntry = new ArrayMappedEntryElements());
	}
	
	public ParserRule getArrayMappedEntryRule() {
		return getArrayMappedEntryAccess().getRule();
	}

	//DictionaryDeclaration:
	//	("dict-obj" | stream?="stream-obj") name=ValidID ("extends" superTypes+=[DictionaryDeclaration|QualifiedName] (","
	//	superTypes+=[DictionaryDeclaration|QualifiedName])*)? ("(" since=SinceVersion ")")? "{" ("config" "{"
	//	subtypeConfig=SubtypeConfig? "}")? entries+=DictionaryEntry* "}";
	public DictionaryDeclarationElements getDictionaryDeclarationAccess() {
		return (pDictionaryDeclaration != null) ? pDictionaryDeclaration : (pDictionaryDeclaration = new DictionaryDeclarationElements());
	}
	
	public ParserRule getDictionaryDeclarationRule() {
		return getDictionaryDeclarationAccess().getRule();
	}

	//SubtypeConfig:
	//	"subtypes" candidates+=[DictionaryDeclaration|QualifiedName] ("," candidates+=[DictionaryDeclaration|QualifiedName])*
	//	";";
	public SubtypeConfigElements getSubtypeConfigAccess() {
		return (pSubtypeConfig != null) ? pSubtypeConfig : (pSubtypeConfig = new SubtypeConfigElements());
	}
	
	public ParserRule getSubtypeConfigRule() {
		return getSubtypeConfigAccess().getRule();
	}

	////AbstractDictionarySubtypeDetector:
	//
	////	NamedEntrySubtypeDetector | EntryExistsSubtypeDetector | IntegerEntryValueSubtypeDetector;
	// //
	//
	////NamedEntrySubtypeDetector:
	// //	'name-detector' '{'
	// //	'key' subtypeName=NAME_OBJECT ';'
	//
	////	'subtypes' subtypes+=[DictionaryDeclaration|QualifiedName] (','
	//
	////	subtypes+=[DictionaryDeclaration|QualifiedName])* ';'
	// //	'}';
	// //
	// //EntryExistsSubtypeDetector:
	//
	////	'entry-detector' '{'
	// //	'key' entryKey=NAME_OBJECT ';'
	//
	////	'subtype' subtype=[DictionaryDeclaration|QualifiedName] ';'
	// //	'}';
	// //
	// //IntegerEntryValueSubtypeDetector:
	//
	////	'int-value-detector' '{'
	// //	'key' entryKey=NAME_OBJECT ';'
	//
	////	'subtypes' '{' entries+=IntegerEntryValueSubtypeDetectorEntry+ '}'
	// //	'}';
	// //
	//
	////IntegerEntryValueSubtypeDetectorEntry:
	//
	////	intValue=IntLiteral '->' subtype=[DictionaryDeclaration|QualifiedName] ';';
	// //
	//
	////DictionaryDeclarationGlobalSubtypes:
	// //	'subtypes' NAME_OBJECT;
	// DictionaryEntry:
	//	key=NAME_OBJECT ("as" alias=ID)? cached?="cached"? required?="required"? inheritable?="inheritable"?
	//	indirectReference=IndirectReference? value=AbstractEntryValue requiresCustomValidation?="custom-validation"?
	//	requiresCustomDefault?="custom-default"? ("(" since=SinceVersion ")")? ";";
	public DictionaryEntryElements getDictionaryEntryAccess() {
		return (pDictionaryEntry != null) ? pDictionaryEntry : (pDictionaryEntry = new DictionaryEntryElements());
	}
	
	public ParserRule getDictionaryEntryRule() {
		return getDictionaryEntryAccess().getRule();
	}

	//PackageDeclaration:
	//	"package" name=QualifiedName "{" elements+=AbstractDeclaration* "}";
	public PackageDeclarationElements getPackageDeclarationAccess() {
		return (pPackageDeclaration != null) ? pPackageDeclaration : (pPackageDeclaration = new PackageDeclarationElements());
	}
	
	public ParserRule getPackageDeclarationRule() {
		return getPackageDeclarationAccess().getRule();
	}

	//BitFlagsDeclaration:
	//	specificationReference=SpecificationReference "bit-flags" name=ValidID ("(" since=SinceVersion ")")? "{"
	//	declarations+=BitFlagsDeclarationPart+ "}";
	public BitFlagsDeclarationElements getBitFlagsDeclarationAccess() {
		return (pBitFlagsDeclaration != null) ? pBitFlagsDeclaration : (pBitFlagsDeclaration = new BitFlagsDeclarationElements());
	}
	
	public ParserRule getBitFlagsDeclarationRule() {
		return getBitFlagsDeclarationAccess().getRule();
	}

	//BitFlagsDeclarationPart:
	//	index=INT "->" name=ValidID ("(" since=SinceVersion ")")? ";";
	public BitFlagsDeclarationPartElements getBitFlagsDeclarationPartAccess() {
		return (pBitFlagsDeclarationPart != null) ? pBitFlagsDeclarationPart : (pBitFlagsDeclarationPart = new BitFlagsDeclarationPartElements());
	}
	
	public ParserRule getBitFlagsDeclarationPartRule() {
		return getBitFlagsDeclarationPartAccess().getRule();
	}

	//NameEnumDeclaration:
	//	"name-enum" name=ValidID ("(" since=SinceVersion ")")? "{" declarations+=NameEnumDeclarationPart (","
	//	declarations+=NameEnumDeclarationPart)* ","? // ignore trailing comma, just like Java does 
	// "}";
	public NameEnumDeclarationElements getNameEnumDeclarationAccess() {
		return (pNameEnumDeclaration != null) ? pNameEnumDeclaration : (pNameEnumDeclaration = new NameEnumDeclarationElements());
	}
	
	public ParserRule getNameEnumDeclarationRule() {
		return getNameEnumDeclarationAccess().getRule();
	}

	//NameEnumDeclarationPart:
	//	constant=NAME_OBJECT ("as" alias=ID)? ("(" since=SinceVersion ")")?;
	public NameEnumDeclarationPartElements getNameEnumDeclarationPartAccess() {
		return (pNameEnumDeclarationPart != null) ? pNameEnumDeclarationPart : (pNameEnumDeclarationPart = new NameEnumDeclarationPartElements());
	}
	
	public ParserRule getNameEnumDeclarationPartRule() {
		return getNameEnumDeclarationPartAccess().getRule();
	}

	//AbstractEntryValue:
	//	NullObjectEntryValue | NameTreeEntryValue | NumberTreeEntryValue | NameObjectEntryValue | NumberObjectEntryValue |
	//	IntegerObjectEntryValue | RealObjectEntryValue | NameEnumEntryValue | ReferenceEntryValue | ParentReferenceEntryValue
	//	| DictionaryDeclarationEntryValue | DictionaryObjectEntryValue | ArrayEntryValue | MappingDictEntryValue |
	//	BooleanEntryValue | DateEntryValue | AlternativeEntryValue | ObjectEntryValue | StringEntryValue |
	//	ArrayMappedEntryValue | BitFlagsEntryValue;
	public AbstractEntryValueElements getAbstractEntryValueAccess() {
		return (pAbstractEntryValue != null) ? pAbstractEntryValue : (pAbstractEntryValue = new AbstractEntryValueElements());
	}
	
	public ParserRule getAbstractEntryValueRule() {
		return getAbstractEntryValueAccess().getRule();
	}

	//NullObjectEntryValue:
	//	{NullObjectEntryValue} "null";
	public NullObjectEntryValueElements getNullObjectEntryValueAccess() {
		return (pNullObjectEntryValue != null) ? pNullObjectEntryValue : (pNullObjectEntryValue = new NullObjectEntryValueElements());
	}
	
	public ParserRule getNullObjectEntryValueRule() {
		return getNullObjectEntryValueAccess().getRule();
	}

	//NameObjectEntryValue:
	//	{NameObjectEntryValue} "name" (hasMustBe?="must-be" requiredValue=NAME_OBJECT | hasDefault?="default"
	//	defaultValue=NAME_OBJECT)?;
	public NameObjectEntryValueElements getNameObjectEntryValueAccess() {
		return (pNameObjectEntryValue != null) ? pNameObjectEntryValue : (pNameObjectEntryValue = new NameObjectEntryValueElements());
	}
	
	public ParserRule getNameObjectEntryValueRule() {
		return getNameObjectEntryValueAccess().getRule();
	}

	//NumberObjectEntryValue:
	//	{NumberObjectEntryValue} "num" ("[" rule=NumberValidationRule "]")? (hasMustBe?="must-be" requiredValue=NumberLiteral
	//	| hasDefault?="default" defaultValue=NumberLiteral)?;
	public NumberObjectEntryValueElements getNumberObjectEntryValueAccess() {
		return (pNumberObjectEntryValue != null) ? pNumberObjectEntryValue : (pNumberObjectEntryValue = new NumberObjectEntryValueElements());
	}
	
	public ParserRule getNumberObjectEntryValueRule() {
		return getNumberObjectEntryValueAccess().getRule();
	}

	//NumberValidationRule:
	//	NumberInclusiveRangeValidationRule | NumberGreaterValidationRule | NumberGreaterEqualsValidationRule |
	//	NumberValuesValidationRule;
	public NumberValidationRuleElements getNumberValidationRuleAccess() {
		return (pNumberValidationRule != null) ? pNumberValidationRule : (pNumberValidationRule = new NumberValidationRuleElements());
	}
	
	public ParserRule getNumberValidationRuleRule() {
		return getNumberValidationRuleAccess().getRule();
	}

	//NumberInclusiveRangeValidationRule:
	//	"range-incl" lowerBound=NumberLiteral "to" upperBound=NumberLiteral;
	public NumberInclusiveRangeValidationRuleElements getNumberInclusiveRangeValidationRuleAccess() {
		return (pNumberInclusiveRangeValidationRule != null) ? pNumberInclusiveRangeValidationRule : (pNumberInclusiveRangeValidationRule = new NumberInclusiveRangeValidationRuleElements());
	}
	
	public ParserRule getNumberInclusiveRangeValidationRuleRule() {
		return getNumberInclusiveRangeValidationRuleAccess().getRule();
	}

	//NumberGreaterValidationRule:
	//	"greater" minValue=NumberLiteral;
	public NumberGreaterValidationRuleElements getNumberGreaterValidationRuleAccess() {
		return (pNumberGreaterValidationRule != null) ? pNumberGreaterValidationRule : (pNumberGreaterValidationRule = new NumberGreaterValidationRuleElements());
	}
	
	public ParserRule getNumberGreaterValidationRuleRule() {
		return getNumberGreaterValidationRuleAccess().getRule();
	}

	//NumberGreaterEqualsValidationRule:
	//	"greater-equals" minValue=NumberLiteral;
	public NumberGreaterEqualsValidationRuleElements getNumberGreaterEqualsValidationRuleAccess() {
		return (pNumberGreaterEqualsValidationRule != null) ? pNumberGreaterEqualsValidationRule : (pNumberGreaterEqualsValidationRule = new NumberGreaterEqualsValidationRuleElements());
	}
	
	public ParserRule getNumberGreaterEqualsValidationRuleRule() {
		return getNumberGreaterEqualsValidationRuleAccess().getRule();
	}

	//NumberValuesValidationRule:
	//	"values" value+=NumberValuesValidationRuleEntry ("," value+=NumberValuesValidationRuleEntry)*;
	public NumberValuesValidationRuleElements getNumberValuesValidationRuleAccess() {
		return (pNumberValuesValidationRule != null) ? pNumberValuesValidationRule : (pNumberValuesValidationRule = new NumberValuesValidationRuleElements());
	}
	
	public ParserRule getNumberValuesValidationRuleRule() {
		return getNumberValuesValidationRuleAccess().getRule();
	}

	//NumberValuesValidationRuleEntry:
	//	value=NumberLiteral ("(" since=SinceVersion ")")?;
	public NumberValuesValidationRuleEntryElements getNumberValuesValidationRuleEntryAccess() {
		return (pNumberValuesValidationRuleEntry != null) ? pNumberValuesValidationRuleEntry : (pNumberValuesValidationRuleEntry = new NumberValuesValidationRuleEntryElements());
	}
	
	public ParserRule getNumberValuesValidationRuleEntryRule() {
		return getNumberValuesValidationRuleEntryAccess().getRule();
	}

	//IntegerObjectEntryValue:
	//	{IntegerObjectEntryValue} "int" ("[" rule=IntegerValidationRule "]")? (hasMustBe?="must-be" requiredValue=IntLiteral
	//	| hasDefault?="default" defaultValue=IntLiteral)?;
	public IntegerObjectEntryValueElements getIntegerObjectEntryValueAccess() {
		return (pIntegerObjectEntryValue != null) ? pIntegerObjectEntryValue : (pIntegerObjectEntryValue = new IntegerObjectEntryValueElements());
	}
	
	public ParserRule getIntegerObjectEntryValueRule() {
		return getIntegerObjectEntryValueAccess().getRule();
	}

	//IntegerValidationRule:
	//	IntegerInclusiveRangeValidationRule | IntegerValuesValidationRule | IntegerGreaterValidationRule |
	//	IntegerGreaterEqualsValidationRule;
	public IntegerValidationRuleElements getIntegerValidationRuleAccess() {
		return (pIntegerValidationRule != null) ? pIntegerValidationRule : (pIntegerValidationRule = new IntegerValidationRuleElements());
	}
	
	public ParserRule getIntegerValidationRuleRule() {
		return getIntegerValidationRuleAccess().getRule();
	}

	//IntegerInclusiveRangeValidationRule:
	//	"range-incl" lowerBound=IntLiteral "to" upperBound=IntLiteral;
	public IntegerInclusiveRangeValidationRuleElements getIntegerInclusiveRangeValidationRuleAccess() {
		return (pIntegerInclusiveRangeValidationRule != null) ? pIntegerInclusiveRangeValidationRule : (pIntegerInclusiveRangeValidationRule = new IntegerInclusiveRangeValidationRuleElements());
	}
	
	public ParserRule getIntegerInclusiveRangeValidationRuleRule() {
		return getIntegerInclusiveRangeValidationRuleAccess().getRule();
	}

	//IntegerValuesValidationRule:
	//	"values" value+=IntegerValuesValidationRuleEntry ("," value+=IntegerValuesValidationRuleEntry)*;
	public IntegerValuesValidationRuleElements getIntegerValuesValidationRuleAccess() {
		return (pIntegerValuesValidationRule != null) ? pIntegerValuesValidationRule : (pIntegerValuesValidationRule = new IntegerValuesValidationRuleElements());
	}
	
	public ParserRule getIntegerValuesValidationRuleRule() {
		return getIntegerValuesValidationRuleAccess().getRule();
	}

	//IntegerGreaterValidationRule:
	//	"greater" minValue=IntLiteral;
	public IntegerGreaterValidationRuleElements getIntegerGreaterValidationRuleAccess() {
		return (pIntegerGreaterValidationRule != null) ? pIntegerGreaterValidationRule : (pIntegerGreaterValidationRule = new IntegerGreaterValidationRuleElements());
	}
	
	public ParserRule getIntegerGreaterValidationRuleRule() {
		return getIntegerGreaterValidationRuleAccess().getRule();
	}

	//IntegerGreaterEqualsValidationRule:
	//	"greater-equals" minValue=NumberLiteral;
	public IntegerGreaterEqualsValidationRuleElements getIntegerGreaterEqualsValidationRuleAccess() {
		return (pIntegerGreaterEqualsValidationRule != null) ? pIntegerGreaterEqualsValidationRule : (pIntegerGreaterEqualsValidationRule = new IntegerGreaterEqualsValidationRuleElements());
	}
	
	public ParserRule getIntegerGreaterEqualsValidationRuleRule() {
		return getIntegerGreaterEqualsValidationRuleAccess().getRule();
	}

	//IntegerValuesValidationRuleEntry:
	//	value=IntLiteral ("(" since=SinceVersion ")")?;
	public IntegerValuesValidationRuleEntryElements getIntegerValuesValidationRuleEntryAccess() {
		return (pIntegerValuesValidationRuleEntry != null) ? pIntegerValuesValidationRuleEntry : (pIntegerValuesValidationRuleEntry = new IntegerValuesValidationRuleEntryElements());
	}
	
	public ParserRule getIntegerValuesValidationRuleEntryRule() {
		return getIntegerValuesValidationRuleEntryAccess().getRule();
	}

	//RealObjectEntryValue:
	//	{RealObjectEntryValue} "real" (hasMustBe?="must-be" requiredValue=RealLiteral | hasDefault?="default"
	//	defaultValue=RealLiteral)?;
	public RealObjectEntryValueElements getRealObjectEntryValueAccess() {
		return (pRealObjectEntryValue != null) ? pRealObjectEntryValue : (pRealObjectEntryValue = new RealObjectEntryValueElements());
	}
	
	public ParserRule getRealObjectEntryValueRule() {
		return getRealObjectEntryValueAccess().getRule();
	}

	//NameTreeEntryValue:
	//	{NameTreeEntryValue} "name-tree";
	public NameTreeEntryValueElements getNameTreeEntryValueAccess() {
		return (pNameTreeEntryValue != null) ? pNameTreeEntryValue : (pNameTreeEntryValue = new NameTreeEntryValueElements());
	}
	
	public ParserRule getNameTreeEntryValueRule() {
		return getNameTreeEntryValueAccess().getRule();
	}

	//NumberTreeEntryValue:
	//	{NumberTreeEntryValue} "number-tree";
	public NumberTreeEntryValueElements getNumberTreeEntryValueAccess() {
		return (pNumberTreeEntryValue != null) ? pNumberTreeEntryValue : (pNumberTreeEntryValue = new NumberTreeEntryValueElements());
	}
	
	public ParserRule getNumberTreeEntryValueRule() {
		return getNumberTreeEntryValueAccess().getRule();
	}

	//ArrayEntryValue:
	//	"array" ("[" rule=ArrayValidationRule "]")? "<" indirectReference=IndirectReference? type=AbstractEntryValue
	//	requiresCustomValidation?="custom-validation"? requiresCustomDefault?="custom-default"? ">";
	public ArrayEntryValueElements getArrayEntryValueAccess() {
		return (pArrayEntryValue != null) ? pArrayEntryValue : (pArrayEntryValue = new ArrayEntryValueElements());
	}
	
	public ParserRule getArrayEntryValueRule() {
		return getArrayEntryValueAccess().getRule();
	}

	//ArrayValidationRule:
	//	ArrayLengthValidationRule;
	public ArrayValidationRuleElements getArrayValidationRuleAccess() {
		return (pArrayValidationRule != null) ? pArrayValidationRule : (pArrayValidationRule = new ArrayValidationRuleElements());
	}
	
	public ParserRule getArrayValidationRuleRule() {
		return getArrayValidationRuleAccess().getRule();
	}

	//ArrayLengthValidationRule:
	//	"length" length=INT;
	public ArrayLengthValidationRuleElements getArrayLengthValidationRuleAccess() {
		return (pArrayLengthValidationRule != null) ? pArrayLengthValidationRule : (pArrayLengthValidationRule = new ArrayLengthValidationRuleElements());
	}
	
	public ParserRule getArrayLengthValidationRuleRule() {
		return getArrayLengthValidationRuleAccess().getRule();
	}

	//ObjectEntryValue:
	//	"object" {ObjectEntryValue};
	public ObjectEntryValueElements getObjectEntryValueAccess() {
		return (pObjectEntryValue != null) ? pObjectEntryValue : (pObjectEntryValue = new ObjectEntryValueElements());
	}
	
	public ParserRule getObjectEntryValueRule() {
		return getObjectEntryValueAccess().getRule();
	}

	//MappingDictEntryValue:
	//	"mapping-dict" "<" type=AbstractEntryValue requiresCustomValidation?="custom-validation"?
	//	requiresCustomDefault?="custom-default"? ">";
	public MappingDictEntryValueElements getMappingDictEntryValueAccess() {
		return (pMappingDictEntryValue != null) ? pMappingDictEntryValue : (pMappingDictEntryValue = new MappingDictEntryValueElements());
	}
	
	public ParserRule getMappingDictEntryValueRule() {
		return getMappingDictEntryValueAccess().getRule();
	}

	//StringEntryValue:
	//	(textString?="text-string" | asciiString?="ascii-string" | byteString?="byte-string") ("[" rule=StringValidationRule
	//	"]")?;
	public StringEntryValueElements getStringEntryValueAccess() {
		return (pStringEntryValue != null) ? pStringEntryValue : (pStringEntryValue = new StringEntryValueElements());
	}
	
	public ParserRule getStringEntryValueRule() {
		return getStringEntryValueAccess().getRule();
	}

	//StringValidationRule:
	//	StringLengthValidationRule;
	public StringValidationRuleElements getStringValidationRuleAccess() {
		return (pStringValidationRule != null) ? pStringValidationRule : (pStringValidationRule = new StringValidationRuleElements());
	}
	
	public ParserRule getStringValidationRuleRule() {
		return getStringValidationRuleAccess().getRule();
	}

	//StringLengthValidationRule:
	//	"length" length=IntLiteral;
	public StringLengthValidationRuleElements getStringLengthValidationRuleAccess() {
		return (pStringLengthValidationRule != null) ? pStringLengthValidationRule : (pStringLengthValidationRule = new StringLengthValidationRuleElements());
	}
	
	public ParserRule getStringLengthValidationRuleRule() {
		return getStringLengthValidationRuleAccess().getRule();
	}

	//AlternativeEntryValue:
	//	"(" options+=AbstractEntryValue ("|" options+=AbstractEntryValue)+ ")";
	public AlternativeEntryValueElements getAlternativeEntryValueAccess() {
		return (pAlternativeEntryValue != null) ? pAlternativeEntryValue : (pAlternativeEntryValue = new AlternativeEntryValueElements());
	}
	
	public ParserRule getAlternativeEntryValueRule() {
		return getAlternativeEntryValueAccess().getRule();
	}

	//BooleanEntryValue:
	//	"bool" {BooleanEntryValue} (hasMustBe?="must-be" requiredValue=Bool | hasDefault?="default" defaultValue=Bool)?;
	public BooleanEntryValueElements getBooleanEntryValueAccess() {
		return (pBooleanEntryValue != null) ? pBooleanEntryValue : (pBooleanEntryValue = new BooleanEntryValueElements());
	}
	
	public ParserRule getBooleanEntryValueRule() {
		return getBooleanEntryValueAccess().getRule();
	}

	//ReferenceEntryValue:
	//	"ref" {ReferenceEntryValue};
	public ReferenceEntryValueElements getReferenceEntryValueAccess() {
		return (pReferenceEntryValue != null) ? pReferenceEntryValue : (pReferenceEntryValue = new ReferenceEntryValueElements());
	}
	
	public ParserRule getReferenceEntryValueRule() {
		return getReferenceEntryValueAccess().getRule();
	}

	//ParentReferenceEntryValue:
	//	"parent-ref" parentType=[DictionaryDeclaration|QualifiedName];
	public ParentReferenceEntryValueElements getParentReferenceEntryValueAccess() {
		return (pParentReferenceEntryValue != null) ? pParentReferenceEntryValue : (pParentReferenceEntryValue = new ParentReferenceEntryValueElements());
	}
	
	public ParserRule getParentReferenceEntryValueRule() {
		return getParentReferenceEntryValueAccess().getRule();
	}

	/// **
	// * This is a rule that representat a simple dictionary with no spcific type.
	// * / DictionaryObjectEntryValue:
	//	{DictionaryObjectEntryValue} "dict";
	public DictionaryObjectEntryValueElements getDictionaryObjectEntryValueAccess() {
		return (pDictionaryObjectEntryValue != null) ? pDictionaryObjectEntryValue : (pDictionaryObjectEntryValue = new DictionaryObjectEntryValueElements());
	}
	
	public ParserRule getDictionaryObjectEntryValueRule() {
		return getDictionaryObjectEntryValueAccess().getRule();
	}

	/// **
	// * Reference to a high level dictionary object 
	// * / DictionaryDeclarationEntryValue:
	//	"dict-obj" target=[DictionaryDeclaration|QualifiedName];
	public DictionaryDeclarationEntryValueElements getDictionaryDeclarationEntryValueAccess() {
		return (pDictionaryDeclarationEntryValue != null) ? pDictionaryDeclarationEntryValue : (pDictionaryDeclarationEntryValue = new DictionaryDeclarationEntryValueElements());
	}
	
	public ParserRule getDictionaryDeclarationEntryValueRule() {
		return getDictionaryDeclarationEntryValueAccess().getRule();
	}

	//ArrayMappedEntryValue:
	//	"array-mapped" target=[ArrayMappedDeclaration|QualifiedName];
	public ArrayMappedEntryValueElements getArrayMappedEntryValueAccess() {
		return (pArrayMappedEntryValue != null) ? pArrayMappedEntryValue : (pArrayMappedEntryValue = new ArrayMappedEntryValueElements());
	}
	
	public ParserRule getArrayMappedEntryValueRule() {
		return getArrayMappedEntryValueAccess().getRule();
	}

	//BitFlagsEntryValue:
	//	"bit-flags" target=[BitFlagsDeclaration|QualifiedName];
	public BitFlagsEntryValueElements getBitFlagsEntryValueAccess() {
		return (pBitFlagsEntryValue != null) ? pBitFlagsEntryValue : (pBitFlagsEntryValue = new BitFlagsEntryValueElements());
	}
	
	public ParserRule getBitFlagsEntryValueRule() {
		return getBitFlagsEntryValueAccess().getRule();
	}

	//DateEntryValue:
	//	{DateEntryValue} "date";
	public DateEntryValueElements getDateEntryValueAccess() {
		return (pDateEntryValue != null) ? pDateEntryValue : (pDateEntryValue = new DateEntryValueElements());
	}
	
	public ParserRule getDateEntryValueRule() {
		return getDateEntryValueAccess().getRule();
	}

	//NameEnumEntryValue:
	//	"name-enum" target=[NameEnumDeclaration|QualifiedName] (hasMustBe?="must-be" requiredValue=NAME_OBJECT |
	//	hasDefault?="default" defaultValue=NAME_OBJECT)?;
	public NameEnumEntryValueElements getNameEnumEntryValueAccess() {
		return (pNameEnumEntryValue != null) ? pNameEnumEntryValue : (pNameEnumEntryValue = new NameEnumEntryValueElements());
	}
	
	public ParserRule getNameEnumEntryValueRule() {
		return getNameEnumEntryValueAccess().getRule();
	}

	//NumberLiteral:
	//	IntLiteral | RealLiteral;
	public NumberLiteralElements getNumberLiteralAccess() {
		return (pNumberLiteral != null) ? pNumberLiteral : (pNumberLiteral = new NumberLiteralElements());
	}
	
	public ParserRule getNumberLiteralRule() {
		return getNumberLiteralAccess().getRule();
	}

	//IntLiteral:
	//	value=INT;
	public IntLiteralElements getIntLiteralAccess() {
		return (pIntLiteral != null) ? pIntLiteral : (pIntLiteral = new IntLiteralElements());
	}
	
	public ParserRule getIntLiteralRule() {
		return getIntLiteralAccess().getRule();
	}

	//RealLiteral:
	//	value=DOUBLE;
	public RealLiteralElements getRealLiteralAccess() {
		return (pRealLiteral != null) ? pRealLiteral : (pRealLiteral = new RealLiteralElements());
	}
	
	public ParserRule getRealLiteralRule() {
		return getRealLiteralAccess().getRule();
	}

	//enum IndirectReference:
	//	UNDEFINED | INDIRECT_SHALL="indirect-shall" | INDIRECT_SHALL_NOT="indirect-shall-not" |
	//	INDIRECT_SHOULD="indirect-should";
	public IndirectReferenceElements getIndirectReferenceAccess() {
		return (unknownRuleIndirectReference != null) ? unknownRuleIndirectReference : (unknownRuleIndirectReference = new IndirectReferenceElements());
	}
	
	public EnumRule getIndirectReferenceRule() {
		return getIndirectReferenceAccess().getRule();
	}

	//enum SinceVersion:
	//	UNDEFINED | PDF_10="pdf-1.0" | PDF_11="pdf-1.1" | PDF_12="pdf-1.2" | PDF_13="pdf-1.3" | PDF_14="pdf-1.4" |
	//	PDF_15="pdf-1.5" | PDF_16="pdf-1.6" | PDF_17="pdf-1.7" | PDF_32000_1="32000-1" | PDF_20="pdf-2.0" |
	//	PDF_32000_2="32000-2";
	public SinceVersionElements getSinceVersionAccess() {
		return (unknownRuleSinceVersion != null) ? unknownRuleSinceVersion : (unknownRuleSinceVersion = new SinceVersionElements());
	}
	
	public EnumRule getSinceVersionRule() {
		return getSinceVersionAccess().getRule();
	}

	//terminal NAME_OBJECT:
	//	"/" ("a".."z" | "A".."Z" | "0".."9" | "_" | "#" "0".."9" "0".."9")+;
	public TerminalRule getNAME_OBJECTRule() {
		return (tNAME_OBJECT != null) ? tNAME_OBJECT : (tNAME_OBJECT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NAME_OBJECT"));
	} 

	//enum Bool:
	//	TRUE="true" | FALSE="false";
	public BoolElements getBoolAccess() {
		return (unknownRuleBool != null) ? unknownRuleBool : (unknownRuleBool = new BoolElements());
	}
	
	public EnumRule getBoolRule() {
		return getBoolAccess().getRule();
	}

	//terminal INT returns ecore::EInt:
	//	"0" | "1".."9" "0".."9"*;
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//// @see http://java.sun.com/javase/6/docs/api/java/lang/Double.html#valueOf(java.lang.String)
	// terminal DOUBLE returns
	//ecore::EDouble:
	//	"1".."9" "0".."9"* ("." "0".."9"+)? (("E" | "e") ("+" | "-")? "0".."9"+)? | "0" ("." "0".."9"+)? (("E" | "e") ("+" |
	//	"-")? "0".."9"+)?;
	public TerminalRule getDOUBLERule() {
		return (tDOUBLE != null) ? tDOUBLE : (tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DOUBLE"));
	} 

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//ValidID:
	//	ID;
	public ValidIDElements getValidIDAccess() {
		return (pValidID != null) ? pValidID : (pValidID = new ValidIDElements());
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
